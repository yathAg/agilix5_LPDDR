// ed_sim_traffic_generator.v

// Generated using ACDS version 24.3.1 102

`timescale 1 ps / 1 ps
module ed_sim_traffic_generator (
		input  wire         remote_intf_clk,              //   remote_intf_clk.clk,     Clock Input
		input  wire         remote_intf_reset_n,          // remote_intf_reset.reset_n, Reset Input
		output wire         master_jtag_reset_jtag_reset, //        jtag_reset.reset,   Reset Output
		input  wire         driver0_axi4_awready,         //      driver0_axi4.awready
		output wire         driver0_axi4_awvalid,         //                  .awvalid
		output wire [6:0]   driver0_axi4_awid,            //                  .awid
		output wire [31:0]  driver0_axi4_awaddr,          //                  .awaddr
		output wire [7:0]   driver0_axi4_awlen,           //                  .awlen
		output wire [2:0]   driver0_axi4_awsize,          //                  .awsize
		output wire [1:0]   driver0_axi4_awburst,         //                  .awburst
		output wire [0:0]   driver0_axi4_awlock,          //                  .awlock
		output wire [3:0]   driver0_axi4_awcache,         //                  .awcache
		output wire [2:0]   driver0_axi4_awprot,          //                  .awprot
		output wire [0:0]   driver0_axi4_awuser,          //                  .awuser
		input  wire         driver0_axi4_arready,         //                  .arready
		output wire         driver0_axi4_arvalid,         //                  .arvalid
		output wire [6:0]   driver0_axi4_arid,            //                  .arid
		output wire [31:0]  driver0_axi4_araddr,          //                  .araddr
		output wire [7:0]   driver0_axi4_arlen,           //                  .arlen
		output wire [2:0]   driver0_axi4_arsize,          //                  .arsize
		output wire [1:0]   driver0_axi4_arburst,         //                  .arburst
		output wire [0:0]   driver0_axi4_arlock,          //                  .arlock
		output wire [3:0]   driver0_axi4_arcache,         //                  .arcache
		output wire [2:0]   driver0_axi4_arprot,          //                  .arprot
		output wire [0:0]   driver0_axi4_aruser,          //                  .aruser
		input  wire         driver0_axi4_wready,          //                  .wready
		output wire         driver0_axi4_wvalid,          //                  .wvalid
		output wire [255:0] driver0_axi4_wdata,           //                  .wdata
		output wire [31:0]  driver0_axi4_wstrb,           //                  .wstrb
		output wire         driver0_axi4_wlast,           //                  .wlast
		output wire         driver0_axi4_bready,          //                  .bready
		input  wire         driver0_axi4_bvalid,          //                  .bvalid
		input  wire [6:0]   driver0_axi4_bid,             //                  .bid
		input  wire [1:0]   driver0_axi4_bresp,           //                  .bresp
		output wire         driver0_axi4_rready,          //                  .rready
		input  wire         driver0_axi4_rvalid,          //                  .rvalid
		input  wire [6:0]   driver0_axi4_rid,             //                  .rid
		input  wire [255:0] driver0_axi4_rdata,           //                  .rdata
		input  wire [1:0]   driver0_axi4_rresp,           //                  .rresp
		input  wire         driver0_axi4_rlast,           //                  .rlast
		input  wire         driver0_clk,                  //       driver0_clk.clk,     Clock Input
		input  wire         driver0_reset_n               //     driver0_reset.reset_n, Reset Input
	);

	ed_sim_traffic_generator_hydra_200_gcz73hi hydra_inst (
		.remote_intf_clk              (remote_intf_clk),              //   input,    width = 1,   remote_intf_clk.clk
		.remote_intf_reset_n          (remote_intf_reset_n),          //   input,    width = 1, remote_intf_reset.reset_n
		.master_jtag_reset_jtag_reset (master_jtag_reset_jtag_reset), //  output,    width = 1,        jtag_reset.reset
		.driver0_axi4_awready         (driver0_axi4_awready),         //   input,    width = 1,      driver0_axi4.awready
		.driver0_axi4_awvalid         (driver0_axi4_awvalid),         //  output,    width = 1,                  .awvalid
		.driver0_axi4_awid            (driver0_axi4_awid),            //  output,    width = 7,                  .awid
		.driver0_axi4_awaddr          (driver0_axi4_awaddr),          //  output,   width = 32,                  .awaddr
		.driver0_axi4_awlen           (driver0_axi4_awlen),           //  output,    width = 8,                  .awlen
		.driver0_axi4_awsize          (driver0_axi4_awsize),          //  output,    width = 3,                  .awsize
		.driver0_axi4_awburst         (driver0_axi4_awburst),         //  output,    width = 2,                  .awburst
		.driver0_axi4_awlock          (driver0_axi4_awlock),          //  output,    width = 1,                  .awlock
		.driver0_axi4_awcache         (driver0_axi4_awcache),         //  output,    width = 4,                  .awcache
		.driver0_axi4_awprot          (driver0_axi4_awprot),          //  output,    width = 3,                  .awprot
		.driver0_axi4_awuser          (driver0_axi4_awuser),          //  output,    width = 1,                  .awuser
		.driver0_axi4_arready         (driver0_axi4_arready),         //   input,    width = 1,                  .arready
		.driver0_axi4_arvalid         (driver0_axi4_arvalid),         //  output,    width = 1,                  .arvalid
		.driver0_axi4_arid            (driver0_axi4_arid),            //  output,    width = 7,                  .arid
		.driver0_axi4_araddr          (driver0_axi4_araddr),          //  output,   width = 32,                  .araddr
		.driver0_axi4_arlen           (driver0_axi4_arlen),           //  output,    width = 8,                  .arlen
		.driver0_axi4_arsize          (driver0_axi4_arsize),          //  output,    width = 3,                  .arsize
		.driver0_axi4_arburst         (driver0_axi4_arburst),         //  output,    width = 2,                  .arburst
		.driver0_axi4_arlock          (driver0_axi4_arlock),          //  output,    width = 1,                  .arlock
		.driver0_axi4_arcache         (driver0_axi4_arcache),         //  output,    width = 4,                  .arcache
		.driver0_axi4_arprot          (driver0_axi4_arprot),          //  output,    width = 3,                  .arprot
		.driver0_axi4_aruser          (driver0_axi4_aruser),          //  output,    width = 1,                  .aruser
		.driver0_axi4_wready          (driver0_axi4_wready),          //   input,    width = 1,                  .wready
		.driver0_axi4_wvalid          (driver0_axi4_wvalid),          //  output,    width = 1,                  .wvalid
		.driver0_axi4_wdata           (driver0_axi4_wdata),           //  output,  width = 256,                  .wdata
		.driver0_axi4_wstrb           (driver0_axi4_wstrb),           //  output,   width = 32,                  .wstrb
		.driver0_axi4_wlast           (driver0_axi4_wlast),           //  output,    width = 1,                  .wlast
		.driver0_axi4_bready          (driver0_axi4_bready),          //  output,    width = 1,                  .bready
		.driver0_axi4_bvalid          (driver0_axi4_bvalid),          //   input,    width = 1,                  .bvalid
		.driver0_axi4_bid             (driver0_axi4_bid),             //   input,    width = 7,                  .bid
		.driver0_axi4_bresp           (driver0_axi4_bresp),           //   input,    width = 2,                  .bresp
		.driver0_axi4_rready          (driver0_axi4_rready),          //  output,    width = 1,                  .rready
		.driver0_axi4_rvalid          (driver0_axi4_rvalid),          //   input,    width = 1,                  .rvalid
		.driver0_axi4_rid             (driver0_axi4_rid),             //   input,    width = 7,                  .rid
		.driver0_axi4_rdata           (driver0_axi4_rdata),           //   input,  width = 256,                  .rdata
		.driver0_axi4_rresp           (driver0_axi4_rresp),           //   input,    width = 2,                  .rresp
		.driver0_axi4_rlast           (driver0_axi4_rlast),           //   input,    width = 1,                  .rlast
		.driver0_clk                  (driver0_clk),                  //   input,    width = 1,       driver0_clk.clk
		.driver0_reset_n              (driver0_reset_n)               //   input,    width = 1,     driver0_reset.reset_n
	);

endmodule
