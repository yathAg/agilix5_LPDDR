// ed_sim_traffic_generator_hydra_200_gcz73hi.v

// This file was auto-generated from hydra_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.3.1 102

`timescale 1 ps / 1 ps
module ed_sim_traffic_generator_hydra_200_gcz73hi (
		input  wire         remote_intf_clk,              //   remote_intf_clk.clk,     Clock Input
		input  wire         remote_intf_reset_n,          // remote_intf_reset.reset_n, Reset Input
		output wire         master_jtag_reset_jtag_reset, //        jtag_reset.reset,   Reset Output
		input  wire         driver0_axi4_awready,         //      driver0_axi4.awready
		output wire         driver0_axi4_awvalid,         //                  .awvalid
		output wire [6:0]   driver0_axi4_awid,            //                  .awid
		output wire [31:0]  driver0_axi4_awaddr,          //                  .awaddr
		output wire [7:0]   driver0_axi4_awlen,           //                  .awlen
		output wire [2:0]   driver0_axi4_awsize,          //                  .awsize
		output wire [1:0]   driver0_axi4_awburst,         //                  .awburst
		output wire [0:0]   driver0_axi4_awlock,          //                  .awlock
		output wire [3:0]   driver0_axi4_awcache,         //                  .awcache
		output wire [2:0]   driver0_axi4_awprot,          //                  .awprot
		output wire [0:0]   driver0_axi4_awuser,          //                  .awuser
		input  wire         driver0_axi4_arready,         //                  .arready
		output wire         driver0_axi4_arvalid,         //                  .arvalid
		output wire [6:0]   driver0_axi4_arid,            //                  .arid
		output wire [31:0]  driver0_axi4_araddr,          //                  .araddr
		output wire [7:0]   driver0_axi4_arlen,           //                  .arlen
		output wire [2:0]   driver0_axi4_arsize,          //                  .arsize
		output wire [1:0]   driver0_axi4_arburst,         //                  .arburst
		output wire [0:0]   driver0_axi4_arlock,          //                  .arlock
		output wire [3:0]   driver0_axi4_arcache,         //                  .arcache
		output wire [2:0]   driver0_axi4_arprot,          //                  .arprot
		output wire [0:0]   driver0_axi4_aruser,          //                  .aruser
		input  wire         driver0_axi4_wready,          //                  .wready
		output wire         driver0_axi4_wvalid,          //                  .wvalid
		output wire [255:0] driver0_axi4_wdata,           //                  .wdata
		output wire [31:0]  driver0_axi4_wstrb,           //                  .wstrb
		output wire         driver0_axi4_wlast,           //                  .wlast
		output wire         driver0_axi4_bready,          //                  .bready
		input  wire         driver0_axi4_bvalid,          //                  .bvalid
		input  wire [6:0]   driver0_axi4_bid,             //                  .bid
		input  wire [1:0]   driver0_axi4_bresp,           //                  .bresp
		output wire         driver0_axi4_rready,          //                  .rready
		input  wire         driver0_axi4_rvalid,          //                  .rvalid
		input  wire [6:0]   driver0_axi4_rid,             //                  .rid
		input  wire [255:0] driver0_axi4_rdata,           //                  .rdata
		input  wire [1:0]   driver0_axi4_rresp,           //                  .rresp
		input  wire         driver0_axi4_rlast,           //                  .rlast
		input  wire         driver0_clk,                  //       driver0_clk.clk,     Clock Input
		input  wire         driver0_reset_n               //     driver0_reset.reset_n, Reset Input
	);

	wire         driver0_mem_axi4_driver_ctrl_driver_error;            // driver0_mem_axi4:driver_error -> global_csr:driver_error_0
	wire         global_csr_driver_ctrl_0_driver_run;                  // global_csr:driver_run_0 -> driver0_mem_axi4:driver_run
	wire         driver0_mem_axi4_driver_ctrl_driver_done;             // driver0_mem_axi4:driver_done -> global_csr:driver_done_0
	wire   [0:0] driver0_mem_axi4_driver_sync_driver_post_out;         // driver0_mem_axi4:driver_post_out -> global_csr:driver_post_out_0
	wire   [0:0] global_csr_driver_sync_0_driver_wait_in;              // global_csr:driver_wait_in_0 -> driver0_mem_axi4:driver_wait_in
	wire   [0:0] global_csr_driver_sync_0_driver_post_in;              // global_csr:driver_post_in_0 -> driver0_mem_axi4:driver_post_in
	wire   [0:0] driver0_mem_axi4_driver_sync_driver_wait_out;         // driver0_mem_axi4:driver_wait_out -> global_csr:driver_wait_out_0
	wire  [11:0] global_csr_axi_bridge_m0_awaddr;                      // global_csr_axi_bridge:m0_awaddr -> mm_interconnect_0:global_csr_axi_bridge_m0_awaddr
	wire   [1:0] global_csr_axi_bridge_m0_bresp;                       // mm_interconnect_0:global_csr_axi_bridge_m0_bresp -> global_csr_axi_bridge:m0_bresp
	wire         global_csr_axi_bridge_m0_arready;                     // mm_interconnect_0:global_csr_axi_bridge_m0_arready -> global_csr_axi_bridge:m0_arready
	wire  [31:0] global_csr_axi_bridge_m0_rdata;                       // mm_interconnect_0:global_csr_axi_bridge_m0_rdata -> global_csr_axi_bridge:m0_rdata
	wire   [3:0] global_csr_axi_bridge_m0_wstrb;                       // global_csr_axi_bridge:m0_wstrb -> mm_interconnect_0:global_csr_axi_bridge_m0_wstrb
	wire         global_csr_axi_bridge_m0_wready;                      // mm_interconnect_0:global_csr_axi_bridge_m0_wready -> global_csr_axi_bridge:m0_wready
	wire         global_csr_axi_bridge_m0_awready;                     // mm_interconnect_0:global_csr_axi_bridge_m0_awready -> global_csr_axi_bridge:m0_awready
	wire         global_csr_axi_bridge_m0_rready;                      // global_csr_axi_bridge:m0_rready -> mm_interconnect_0:global_csr_axi_bridge_m0_rready
	wire         global_csr_axi_bridge_m0_bready;                      // global_csr_axi_bridge:m0_bready -> mm_interconnect_0:global_csr_axi_bridge_m0_bready
	wire         global_csr_axi_bridge_m0_wvalid;                      // global_csr_axi_bridge:m0_wvalid -> mm_interconnect_0:global_csr_axi_bridge_m0_wvalid
	wire  [11:0] global_csr_axi_bridge_m0_araddr;                      // global_csr_axi_bridge:m0_araddr -> mm_interconnect_0:global_csr_axi_bridge_m0_araddr
	wire   [2:0] global_csr_axi_bridge_m0_arprot;                      // global_csr_axi_bridge:m0_arprot -> mm_interconnect_0:global_csr_axi_bridge_m0_arprot
	wire   [1:0] global_csr_axi_bridge_m0_rresp;                       // mm_interconnect_0:global_csr_axi_bridge_m0_rresp -> global_csr_axi_bridge:m0_rresp
	wire   [2:0] global_csr_axi_bridge_m0_awprot;                      // global_csr_axi_bridge:m0_awprot -> mm_interconnect_0:global_csr_axi_bridge_m0_awprot
	wire  [31:0] global_csr_axi_bridge_m0_wdata;                       // global_csr_axi_bridge:m0_wdata -> mm_interconnect_0:global_csr_axi_bridge_m0_wdata
	wire         global_csr_axi_bridge_m0_arvalid;                     // global_csr_axi_bridge:m0_arvalid -> mm_interconnect_0:global_csr_axi_bridge_m0_arvalid
	wire         global_csr_axi_bridge_m0_bvalid;                      // mm_interconnect_0:global_csr_axi_bridge_m0_bvalid -> global_csr_axi_bridge:m0_bvalid
	wire         global_csr_axi_bridge_m0_awvalid;                     // global_csr_axi_bridge:m0_awvalid -> mm_interconnect_0:global_csr_axi_bridge_m0_awvalid
	wire         global_csr_axi_bridge_m0_rvalid;                      // mm_interconnect_0:global_csr_axi_bridge_m0_rvalid -> global_csr_axi_bridge:m0_rvalid
	wire  [11:0] mm_interconnect_0_global_csr_apb3_paddr;              // mm_interconnect_0:global_csr_apb3_paddr -> global_csr:apb3_paddr
	wire         mm_interconnect_0_global_csr_apb3_pready;             // global_csr:apb3_pready -> mm_interconnect_0:global_csr_apb3_pready
	wire  [31:0] mm_interconnect_0_global_csr_apb3_prdata;             // global_csr:apb3_prdata -> mm_interconnect_0:global_csr_apb3_prdata
	wire         mm_interconnect_0_global_csr_apb3_pslverr;            // global_csr:apb3_pslverr -> mm_interconnect_0:global_csr_apb3_pslverr
	wire  [31:0] mm_interconnect_0_global_csr_apb3_pwdata;             // mm_interconnect_0:global_csr_apb3_pwdata -> global_csr:apb3_pwdata
	wire         mm_interconnect_0_global_csr_apb3_penable;            // mm_interconnect_0:global_csr_apb3_penable -> global_csr:apb3_penable
	wire         mm_interconnect_0_global_csr_apb3_psel;               // mm_interconnect_0:global_csr_apb3_psel -> global_csr:apb3_psel
	wire         mm_interconnect_0_global_csr_apb3_pwrite;             // mm_interconnect_0:global_csr_apb3_pwrite -> global_csr:apb3_pwrite
	wire  [31:0] remote_access_jamb_master_readdata;                   // mm_interconnect_1:remote_access_jamb_master_readdata -> remote_access_jamb:master_readdata
	wire         remote_access_jamb_master_waitrequest;                // mm_interconnect_1:remote_access_jamb_master_waitrequest -> remote_access_jamb:master_waitrequest
	wire  [31:0] remote_access_jamb_master_address;                    // remote_access_jamb:master_address -> mm_interconnect_1:remote_access_jamb_master_address
	wire         remote_access_jamb_master_read;                       // remote_access_jamb:master_read -> mm_interconnect_1:remote_access_jamb_master_read
	wire   [3:0] remote_access_jamb_master_byteenable;                 // remote_access_jamb:master_byteenable -> mm_interconnect_1:remote_access_jamb_master_byteenable
	wire         remote_access_jamb_master_readdatavalid;              // mm_interconnect_1:remote_access_jamb_master_readdatavalid -> remote_access_jamb:master_readdatavalid
	wire         remote_access_jamb_master_write;                      // remote_access_jamb:master_write -> mm_interconnect_1:remote_access_jamb_master_write
	wire  [31:0] remote_access_jamb_master_writedata;                  // remote_access_jamb:master_writedata -> mm_interconnect_1:remote_access_jamb_master_writedata
	wire  [11:0] mm_interconnect_1_global_csr_axi_bridge_s0_awaddr;    // mm_interconnect_1:global_csr_axi_bridge_s0_awaddr -> global_csr_axi_bridge:s0_awaddr
	wire   [1:0] mm_interconnect_1_global_csr_axi_bridge_s0_bresp;     // global_csr_axi_bridge:s0_bresp -> mm_interconnect_1:global_csr_axi_bridge_s0_bresp
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_arready;   // global_csr_axi_bridge:s0_arready -> mm_interconnect_1:global_csr_axi_bridge_s0_arready
	wire  [31:0] mm_interconnect_1_global_csr_axi_bridge_s0_rdata;     // global_csr_axi_bridge:s0_rdata -> mm_interconnect_1:global_csr_axi_bridge_s0_rdata
	wire   [3:0] mm_interconnect_1_global_csr_axi_bridge_s0_wstrb;     // mm_interconnect_1:global_csr_axi_bridge_s0_wstrb -> global_csr_axi_bridge:s0_wstrb
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_wready;    // global_csr_axi_bridge:s0_wready -> mm_interconnect_1:global_csr_axi_bridge_s0_wready
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_awready;   // global_csr_axi_bridge:s0_awready -> mm_interconnect_1:global_csr_axi_bridge_s0_awready
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_rready;    // mm_interconnect_1:global_csr_axi_bridge_s0_rready -> global_csr_axi_bridge:s0_rready
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_bready;    // mm_interconnect_1:global_csr_axi_bridge_s0_bready -> global_csr_axi_bridge:s0_bready
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_wvalid;    // mm_interconnect_1:global_csr_axi_bridge_s0_wvalid -> global_csr_axi_bridge:s0_wvalid
	wire  [11:0] mm_interconnect_1_global_csr_axi_bridge_s0_araddr;    // mm_interconnect_1:global_csr_axi_bridge_s0_araddr -> global_csr_axi_bridge:s0_araddr
	wire   [2:0] mm_interconnect_1_global_csr_axi_bridge_s0_arprot;    // mm_interconnect_1:global_csr_axi_bridge_s0_arprot -> global_csr_axi_bridge:s0_arprot
	wire   [1:0] mm_interconnect_1_global_csr_axi_bridge_s0_rresp;     // global_csr_axi_bridge:s0_rresp -> mm_interconnect_1:global_csr_axi_bridge_s0_rresp
	wire   [2:0] mm_interconnect_1_global_csr_axi_bridge_s0_awprot;    // mm_interconnect_1:global_csr_axi_bridge_s0_awprot -> global_csr_axi_bridge:s0_awprot
	wire  [31:0] mm_interconnect_1_global_csr_axi_bridge_s0_wdata;     // mm_interconnect_1:global_csr_axi_bridge_s0_wdata -> global_csr_axi_bridge:s0_wdata
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_arvalid;   // mm_interconnect_1:global_csr_axi_bridge_s0_arvalid -> global_csr_axi_bridge:s0_arvalid
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_bvalid;    // global_csr_axi_bridge:s0_bvalid -> mm_interconnect_1:global_csr_axi_bridge_s0_bvalid
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_awvalid;   // mm_interconnect_1:global_csr_axi_bridge_s0_awvalid -> global_csr_axi_bridge:s0_awvalid
	wire         mm_interconnect_1_global_csr_axi_bridge_s0_rvalid;    // global_csr_axi_bridge:s0_rvalid -> mm_interconnect_1:global_csr_axi_bridge_s0_rvalid
	wire  [23:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awaddr;  // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_awaddr -> driver0_mem_axi4:csr_axi4l_awaddr
	wire   [1:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bresp;   // driver0_mem_axi4:csr_axi4l_bresp -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_bresp
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arready; // driver0_mem_axi4:csr_axi4l_arready -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_arready
	wire  [31:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rdata;   // driver0_mem_axi4:csr_axi4l_rdata -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_rdata
	wire   [3:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wstrb;   // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_wstrb -> driver0_mem_axi4:csr_axi4l_wstrb
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wready;  // driver0_mem_axi4:csr_axi4l_wready -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_wready
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awready; // driver0_mem_axi4:csr_axi4l_awready -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_awready
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rready;  // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_rready -> driver0_mem_axi4:csr_axi4l_rready
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bready;  // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_bready -> driver0_mem_axi4:csr_axi4l_bready
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wvalid;  // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_wvalid -> driver0_mem_axi4:csr_axi4l_wvalid
	wire  [23:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_araddr;  // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_araddr -> driver0_mem_axi4:csr_axi4l_araddr
	wire   [2:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arprot;  // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_arprot -> driver0_mem_axi4:csr_axi4l_arprot
	wire   [1:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rresp;   // driver0_mem_axi4:csr_axi4l_rresp -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_rresp
	wire   [2:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awprot;  // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_awprot -> driver0_mem_axi4:csr_axi4l_awprot
	wire  [31:0] mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wdata;   // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_wdata -> driver0_mem_axi4:csr_axi4l_wdata
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arvalid; // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_arvalid -> driver0_mem_axi4:csr_axi4l_arvalid
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bvalid;  // driver0_mem_axi4:csr_axi4l_bvalid -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_bvalid
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awvalid; // mm_interconnect_1:driver0_mem_axi4_csr_axi4l_awvalid -> driver0_mem_axi4:csr_axi4l_awvalid
	wire         mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rvalid;  // driver0_mem_axi4:csr_axi4l_rvalid -> mm_interconnect_1:driver0_mem_axi4_csr_axi4l_rvalid
	wire         rst_controller_reset_out_reset;                       // rst_controller:reset_out -> [global_csr_axi_bridge:aresetn, mm_interconnect_0:global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_1:global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;                   // rst_controller_001:reset_out -> mm_interconnect_1:remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset

	hydra_software_dummy_top software (
	);

	hydra_rtl_library_dummy_top rtl_library (
	);

	ed_sim_traffic_generator_altera_jtag_avalon_master_191_unfwqdy #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) remote_access_jamb (
		.clk_clk              (remote_intf_clk),                         //   input,   width = 1,          clk.clk
		.clk_reset_reset      (~remote_intf_reset_n),                    //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (master_jtag_reset_jtag_reset),            //  output,   width = 1, master_reset.reset
		.master_address       (remote_access_jamb_master_address),       //  output,  width = 32,       master.address
		.master_readdata      (remote_access_jamb_master_readdata),      //   input,  width = 32,             .readdata
		.master_read          (remote_access_jamb_master_read),          //  output,   width = 1,             .read
		.master_write         (remote_access_jamb_master_write),         //  output,   width = 1,             .write
		.master_writedata     (remote_access_jamb_master_writedata),     //  output,  width = 32,             .writedata
		.master_waitrequest   (remote_access_jamb_master_waitrequest),   //   input,   width = 1,             .waitrequest
		.master_readdatavalid (remote_access_jamb_master_readdatavalid), //   input,   width = 1,             .readdatavalid
		.master_byteenable    (remote_access_jamb_master_byteenable)     //  output,   width = 4,             .byteenable
	);

	ed_sim_traffic_generator_hydra_global_csr_100_7ggcjai #(
		.RUN_ON_RESET                          (0),
		.CALL_SIM_FINISH                       (1),
		.NUM_DRIVERS                           (1),
		.ENABLE_CSR_INTF                       (1),
		.PORT_HYDRA_DRIVER_SYNC_POST_OUT_WIDTH (1),
		.PORT_HYDRA_DRIVER_SYNC_POST_IN_WIDTH  (1),
		.PORT_HYDRA_DRIVER_SYNC_WAIT_OUT_WIDTH (1),
		.PORT_HYDRA_DRIVER_SYNC_WAIT_IN_WIDTH  (1),
		.PORT_HYDRA_APB3_PADDR_WIDTH           (12),
		.PORT_HYDRA_APB3_PWDATA_WIDTH          (32),
		.PORT_HYDRA_APB3_PRDATA_WIDTH          (32)
	) global_csr (
		.clk               (remote_intf_clk),                              //   input,   width = 1,            clk.clk
		.reset_n           (remote_intf_reset_n),                          //   input,   width = 1,          reset.reset_n
		.driver_clk_0      (driver0_clk),                                  //   input,   width = 1,   driver_clk_0.clk
		.driver_reset_n_0  (driver0_reset_n),                              //   input,   width = 1, driver_reset_0.reset_n
		.driver_run_0      (global_csr_driver_ctrl_0_driver_run),          //  output,   width = 1,  driver_ctrl_0.driver_run
		.driver_done_0     (driver0_mem_axi4_driver_ctrl_driver_done),     //   input,   width = 1,               .driver_done
		.driver_error_0    (driver0_mem_axi4_driver_ctrl_driver_error),    //   input,   width = 1,               .driver_error
		.driver_post_out_0 (driver0_mem_axi4_driver_sync_driver_post_out), //   input,   width = 1,  driver_sync_0.driver_post_out
		.driver_post_in_0  (global_csr_driver_sync_0_driver_post_in),      //  output,   width = 1,               .driver_post_in
		.driver_wait_out_0 (driver0_mem_axi4_driver_sync_driver_wait_out), //   input,   width = 1,               .driver_wait_out
		.driver_wait_in_0  (global_csr_driver_sync_0_driver_wait_in),      //  output,   width = 1,               .driver_wait_in
		.apb3_paddr        (mm_interconnect_0_global_csr_apb3_paddr),      //   input,  width = 12,           apb3.paddr
		.apb3_penable      (mm_interconnect_0_global_csr_apb3_penable),    //   input,   width = 1,               .penable
		.apb3_psel         (mm_interconnect_0_global_csr_apb3_psel),       //   input,   width = 1,               .psel
		.apb3_pwrite       (mm_interconnect_0_global_csr_apb3_pwrite),     //   input,   width = 1,               .pwrite
		.apb3_pready       (mm_interconnect_0_global_csr_apb3_pready),     //  output,   width = 1,               .pready
		.apb3_pwdata       (mm_interconnect_0_global_csr_apb3_pwdata),     //   input,  width = 32,               .pwdata
		.apb3_prdata       (mm_interconnect_0_global_csr_apb3_prdata),     //  output,  width = 32,               .prdata
		.apb3_pslverr      (mm_interconnect_0_global_csr_apb3_pslverr),    //  output,   width = 1,               .pslverr
		.status_done       (),                                             // (terminated),                             
		.status_error      ()                                              // (terminated),                             
	);

	ed_sim_traffic_generator_altera_axi_bridge_1992_kxv226q #(
		.USE_PIPELINE              (1),
		.USE_M0_AWID               (0),
		.USE_M0_AWREGION           (0),
		.USE_M0_AWLEN              (0),
		.USE_M0_AWSIZE             (0),
		.USE_M0_AWBURST            (0),
		.USE_M0_AWLOCK             (0),
		.USE_M0_AWCACHE            (0),
		.USE_M0_AWQOS              (0),
		.USE_M0_AWUNIQUE           (0),
		.USE_S0_AWSIZE             (0),
		.USE_S0_ARSIZE             (0),
		.USE_S0_AWREGION           (0),
		.USE_S0_AWLOCK             (0),
		.USE_S0_AWCACHE            (0),
		.USE_S0_AWQOS              (0),
		.USE_S0_AWPROT             (1),
		.USE_S0_RID                (0),
		.USE_S0_BID                (0),
		.USE_M0_WSTRB              (1),
		.USE_S0_WLAST              (0),
		.USE_M0_BID                (0),
		.USE_M0_BRESP              (1),
		.USE_S0_BRESP              (1),
		.USE_M0_ARID               (0),
		.USE_M0_ARREGION           (0),
		.USE_M0_ARLEN              (0),
		.USE_M0_ARSIZE             (0),
		.USE_M0_ARBURST            (0),
		.USE_M0_ARLOCK             (0),
		.USE_M0_ARCACHE            (0),
		.USE_M0_ARQOS              (0),
		.USE_S0_ARREGION           (0),
		.USE_S0_ARLOCK             (0),
		.USE_S0_ARCACHE            (0),
		.USE_S0_ARQOS              (0),
		.USE_S0_ARPROT             (1),
		.USE_M0_RID                (0),
		.USE_M0_RRESP              (1),
		.USE_M0_RLAST              (0),
		.USE_S0_RRESP              (1),
		.M0_ID_WIDTH               (8),
		.S0_ID_WIDTH               (8),
		.DATA_WIDTH                (32),
		.SID_WIDTH                 (1),
		.WRITE_ADDR_USER_WIDTH     (64),
		.READ_ADDR_USER_WIDTH      (64),
		.WRITE_DATA_USER_WIDTH     (16),
		.WRITE_RESP_USER_WIDTH     (16),
		.READ_DATA_USER_WIDTH      (16),
		.ADDR_WIDTH                (12),
		.USE_S0_AWUSER             (0),
		.USE_S0_ARUSER             (0),
		.USE_S0_WUSER              (0),
		.USE_S0_RUSER              (0),
		.USE_S0_BUSER              (0),
		.USE_M0_AWUSER             (0),
		.USE_M0_ARUSER             (0),
		.USE_M0_WUSER              (0),
		.USE_M0_RUSER              (0),
		.USE_M0_BUSER              (0),
		.ROLE_BASED_USER           (0),
		.ENABLE_AXI5               (1),
		.SAI_WIDTH                 (1),
		.DATACHK_WIDTH             (4),
		.ADDRCHK_WIDTH             (2),
		.USER_DATA_WIDTH           (1),
		.POISON_WIDTH              (1),
		.USE_M0_ADDRCHK            (0),
		.USE_M0_DATACHK            (0),
		.USE_M0_SAI                (0),
		.USE_M0_POISON             (0),
		.USE_M0_USER_DATA          (0),
		.USE_M0_AWAKEUP            (0),
		.USE_M0_TRACE              (0),
		.USE_S0_ADDRCHK            (0),
		.USE_S0_DATACHK            (0),
		.USE_S0_SAI                (0),
		.USE_S0_POISON             (0),
		.USE_S0_USER_DATA          (0),
		.USE_S0_AWAKEUP            (0),
		.USE_S0_TRACE              (0),
		.AXI_VERSION               ("AXI4-Lite"),
		.BURST_LENGTH_WIDTH        (4),
		.AWSNOOP_WIDTH             (3),
		.LOCK_WIDTH                (2),
		.ACE_LITE_SUPPORT          (0),
		.ACE5_LITE_SUPPORT         (0),
		.SYNC_RESET                (0),
		.BACKPRESSURE_DURING_RESET (0)
	) global_csr_axi_bridge (
		.aclk              (remote_intf_clk),                                                      //   input,   width = 1,       clk.clk
		.aresetn           (~rst_controller_reset_out_reset),                                      //   input,   width = 1, clk_reset.reset_n
		.s0_awaddr         (mm_interconnect_1_global_csr_axi_bridge_s0_awaddr),                    //   input,  width = 12,        s0.awaddr
		.s0_awprot         (mm_interconnect_1_global_csr_axi_bridge_s0_awprot),                    //   input,   width = 3,          .awprot
		.s0_awvalid        (mm_interconnect_1_global_csr_axi_bridge_s0_awvalid),                   //   input,   width = 1,          .awvalid
		.s0_awready        (mm_interconnect_1_global_csr_axi_bridge_s0_awready),                   //  output,   width = 1,          .awready
		.s0_wdata          (mm_interconnect_1_global_csr_axi_bridge_s0_wdata),                     //   input,  width = 32,          .wdata
		.s0_wstrb          (mm_interconnect_1_global_csr_axi_bridge_s0_wstrb),                     //   input,   width = 4,          .wstrb
		.s0_wvalid         (mm_interconnect_1_global_csr_axi_bridge_s0_wvalid),                    //   input,   width = 1,          .wvalid
		.s0_wready         (mm_interconnect_1_global_csr_axi_bridge_s0_wready),                    //  output,   width = 1,          .wready
		.s0_bresp          (mm_interconnect_1_global_csr_axi_bridge_s0_bresp),                     //  output,   width = 2,          .bresp
		.s0_bvalid         (mm_interconnect_1_global_csr_axi_bridge_s0_bvalid),                    //  output,   width = 1,          .bvalid
		.s0_bready         (mm_interconnect_1_global_csr_axi_bridge_s0_bready),                    //   input,   width = 1,          .bready
		.s0_araddr         (mm_interconnect_1_global_csr_axi_bridge_s0_araddr),                    //   input,  width = 12,          .araddr
		.s0_arprot         (mm_interconnect_1_global_csr_axi_bridge_s0_arprot),                    //   input,   width = 3,          .arprot
		.s0_arvalid        (mm_interconnect_1_global_csr_axi_bridge_s0_arvalid),                   //   input,   width = 1,          .arvalid
		.s0_arready        (mm_interconnect_1_global_csr_axi_bridge_s0_arready),                   //  output,   width = 1,          .arready
		.s0_rdata          (mm_interconnect_1_global_csr_axi_bridge_s0_rdata),                     //  output,  width = 32,          .rdata
		.s0_rresp          (mm_interconnect_1_global_csr_axi_bridge_s0_rresp),                     //  output,   width = 2,          .rresp
		.s0_rvalid         (mm_interconnect_1_global_csr_axi_bridge_s0_rvalid),                    //  output,   width = 1,          .rvalid
		.s0_rready         (mm_interconnect_1_global_csr_axi_bridge_s0_rready),                    //   input,   width = 1,          .rready
		.m0_awaddr         (global_csr_axi_bridge_m0_awaddr),                                      //  output,  width = 12,        m0.awaddr
		.m0_awprot         (global_csr_axi_bridge_m0_awprot),                                      //  output,   width = 3,          .awprot
		.m0_awvalid        (global_csr_axi_bridge_m0_awvalid),                                     //  output,   width = 1,          .awvalid
		.m0_awready        (global_csr_axi_bridge_m0_awready),                                     //   input,   width = 1,          .awready
		.m0_wdata          (global_csr_axi_bridge_m0_wdata),                                       //  output,  width = 32,          .wdata
		.m0_wstrb          (global_csr_axi_bridge_m0_wstrb),                                       //  output,   width = 4,          .wstrb
		.m0_wvalid         (global_csr_axi_bridge_m0_wvalid),                                      //  output,   width = 1,          .wvalid
		.m0_wready         (global_csr_axi_bridge_m0_wready),                                      //   input,   width = 1,          .wready
		.m0_bresp          (global_csr_axi_bridge_m0_bresp),                                       //   input,   width = 2,          .bresp
		.m0_bvalid         (global_csr_axi_bridge_m0_bvalid),                                      //   input,   width = 1,          .bvalid
		.m0_bready         (global_csr_axi_bridge_m0_bready),                                      //  output,   width = 1,          .bready
		.m0_araddr         (global_csr_axi_bridge_m0_araddr),                                      //  output,  width = 12,          .araddr
		.m0_arprot         (global_csr_axi_bridge_m0_arprot),                                      //  output,   width = 3,          .arprot
		.m0_arvalid        (global_csr_axi_bridge_m0_arvalid),                                     //  output,   width = 1,          .arvalid
		.m0_arready        (global_csr_axi_bridge_m0_arready),                                     //   input,   width = 1,          .arready
		.m0_rdata          (global_csr_axi_bridge_m0_rdata),                                       //   input,  width = 32,          .rdata
		.m0_rresp          (global_csr_axi_bridge_m0_rresp),                                       //   input,   width = 2,          .rresp
		.m0_rvalid         (global_csr_axi_bridge_m0_rvalid),                                      //   input,   width = 1,          .rvalid
		.m0_rready         (global_csr_axi_bridge_m0_rready),                                      //  output,   width = 1,          .rready
		.s0_awatop         (6'b000000),                                                            // (terminated),                        
		.s0_awstashnid     (11'b00000000000),                                                      // (terminated),                        
		.s0_awstashniden   (1'b0),                                                                 // (terminated),                        
		.s0_awstashlpid    (5'b00000),                                                             // (terminated),                        
		.s0_awstashlpiden  (1'b0),                                                                 // (terminated),                        
		.s0_awmmusecsid    (1'b0),                                                                 // (terminated),                        
		.s0_awmmusid       (1'b0),                                                                 // (terminated),                        
		.s0_awakeup        (1'b0),                                                                 // (terminated),                        
		.s0_awtrace        (1'b0),                                                                 // (terminated),                        
		.s0_artrace        (1'b0),                                                                 // (terminated),                        
		.s0_wpoison        (1'b0),                                                                 // (terminated),                        
		.s0_wdatachk       (4'b0000),                                                              // (terminated),                        
		.s0_wtrace         (1'b0),                                                                 // (terminated),                        
		.s0_btrace         (),                                                                     // (terminated),                        
		.s0_rpoison        (),                                                                     // (terminated),                        
		.s0_rdatachk       (),                                                                     // (terminated),                        
		.s0_rtrace         (),                                                                     // (terminated),                        
		.s0_awid           (8'b00000000),                                                          // (terminated),                        
		.s0_awlen          (4'b0000),                                                              // (terminated),                        
		.s0_awsize         (3'b000),                                                               // (terminated),                        
		.s0_awburst        (2'b00),                                                                // (terminated),                        
		.s0_awlock         (2'b00),                                                                // (terminated),                        
		.s0_awcache        (4'b0000),                                                              // (terminated),                        
		.s0_awuser         (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated),                        
		.s0_awqos          (4'b0000),                                                              // (terminated),                        
		.s0_awregion       (4'b0000),                                                              // (terminated),                        
		.s0_wid            (8'b00000000),                                                          // (terminated),                        
		.s0_wlast          (1'b0),                                                                 // (terminated),                        
		.s0_wuser          (16'b0000000000000000),                                                 // (terminated),                        
		.s0_bid            (),                                                                     // (terminated),                        
		.s0_buser          (),                                                                     // (terminated),                        
		.s0_arid           (8'b00000000),                                                          // (terminated),                        
		.s0_arlen          (4'b0000),                                                              // (terminated),                        
		.s0_arsize         (3'b000),                                                               // (terminated),                        
		.s0_arburst        (2'b00),                                                                // (terminated),                        
		.s0_arlock         (2'b00),                                                                // (terminated),                        
		.s0_arcache        (4'b0000),                                                              // (terminated),                        
		.s0_aruser         (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated),                        
		.s0_arqos          (4'b0000),                                                              // (terminated),                        
		.s0_arregion       (4'b0000),                                                              // (terminated),                        
		.s0_rid            (),                                                                     // (terminated),                        
		.s0_rlast          (),                                                                     // (terminated),                        
		.s0_ruser          (),                                                                     // (terminated),                        
		.s0_ardomain       (2'b00),                                                                // (terminated),                        
		.s0_arsnoop        (4'b0000),                                                              // (terminated),                        
		.s0_arbar          (2'b00),                                                                // (terminated),                        
		.s0_awdomain       (2'b00),                                                                // (terminated),                        
		.s0_awsnoop        (3'b000),                                                               // (terminated),                        
		.s0_awbar          (2'b00),                                                                // (terminated),                        
		.s0_awunique       (1'b0),                                                                 // (terminated),                        
		.s0_armmusecsid    (1'b0),                                                                 // (terminated),                        
		.s0_armmusid       (1'b0),                                                                 // (terminated),                        
		.s0_awuser_addrchk (2'b00),                                                                // (terminated),                        
		.s0_awuser_sai     (1'b0),                                                                 // (terminated),                        
		.s0_aruser_addrchk (2'b00),                                                                // (terminated),                        
		.s0_aruser_sai     (1'b0),                                                                 // (terminated),                        
		.s0_wuser_datachk  (4'b0000),                                                              // (terminated),                        
		.s0_wuser_data     (1'b0),                                                                 // (terminated),                        
		.s0_wuser_poison   (1'b0),                                                                 // (terminated),                        
		.s0_ruser_datachk  (),                                                                     // (terminated),                        
		.s0_ruser_data     (),                                                                     // (terminated),                        
		.s0_ruser_poison   (),                                                                     // (terminated),                        
		.m0_awakeup        (),                                                                     // (terminated),                        
		.m0_awtrace        (),                                                                     // (terminated),                        
		.m0_artrace        (),                                                                     // (terminated),                        
		.m0_wpoison        (),                                                                     // (terminated),                        
		.m0_wdatachk       (),                                                                     // (terminated),                        
		.m0_wtrace         (),                                                                     // (terminated),                        
		.m0_btrace         (1'b0),                                                                 // (terminated),                        
		.m0_rpoison        (1'b0),                                                                 // (terminated),                        
		.m0_rdatachk       (4'b0000),                                                              // (terminated),                        
		.m0_rtrace         (1'b0),                                                                 // (terminated),                        
		.m0_awid           (),                                                                     // (terminated),                        
		.m0_awlen          (),                                                                     // (terminated),                        
		.m0_awsize         (),                                                                     // (terminated),                        
		.m0_awburst        (),                                                                     // (terminated),                        
		.m0_awlock         (),                                                                     // (terminated),                        
		.m0_awcache        (),                                                                     // (terminated),                        
		.m0_awuser         (),                                                                     // (terminated),                        
		.m0_awqos          (),                                                                     // (terminated),                        
		.m0_awregion       (),                                                                     // (terminated),                        
		.m0_wid            (),                                                                     // (terminated),                        
		.m0_wlast          (),                                                                     // (terminated),                        
		.m0_wuser          (),                                                                     // (terminated),                        
		.m0_bid            (8'b00000000),                                                          // (terminated),                        
		.m0_buser          (16'b0000000000000000),                                                 // (terminated),                        
		.m0_arid           (),                                                                     // (terminated),                        
		.m0_arlen          (),                                                                     // (terminated),                        
		.m0_arsize         (),                                                                     // (terminated),                        
		.m0_arburst        (),                                                                     // (terminated),                        
		.m0_arlock         (),                                                                     // (terminated),                        
		.m0_arcache        (),                                                                     // (terminated),                        
		.m0_aruser         (),                                                                     // (terminated),                        
		.m0_arqos          (),                                                                     // (terminated),                        
		.m0_arregion       (),                                                                     // (terminated),                        
		.m0_rid            (8'b00000000),                                                          // (terminated),                        
		.m0_rlast          (1'b0),                                                                 // (terminated),                        
		.m0_ruser          (16'b0000000000000000),                                                 // (terminated),                        
		.m0_ardomain       (),                                                                     // (terminated),                        
		.m0_arsnoop        (),                                                                     // (terminated),                        
		.m0_arbar          (),                                                                     // (terminated),                        
		.m0_awdomain       (),                                                                     // (terminated),                        
		.m0_awsnoop        (),                                                                     // (terminated),                        
		.m0_awbar          (),                                                                     // (terminated),                        
		.m0_awunique       (),                                                                     // (terminated),                        
		.m0_awuser_addrchk (),                                                                     // (terminated),                        
		.m0_awuser_sai     (),                                                                     // (terminated),                        
		.m0_aruser_addrchk (),                                                                     // (terminated),                        
		.m0_aruser_sai     (),                                                                     // (terminated),                        
		.m0_wuser_datachk  (),                                                                     // (terminated),                        
		.m0_wuser_data     (),                                                                     // (terminated),                        
		.m0_wuser_poison   (),                                                                     // (terminated),                        
		.m0_ruser_datachk  (4'b0000),                                                              // (terminated),                        
		.m0_ruser_data     (1'b0),                                                                 // (terminated),                        
		.m0_ruser_poison   (1'b0),                                                                 // (terminated),                        
		.m0_armmusecsid    (),                                                                     // (terminated),                        
		.m0_armmusid       (),                                                                     // (terminated),                        
		.m0_awmmusecsid    (),                                                                     // (terminated),                        
		.m0_awmmusid       ()                                                                      // (terminated),                        
	);

	hydra_mem_axi4_driver_top #(
		.NUM_DRIVERS                           (1),
		.DRIVER_SYNC_COUNTER_WIDTH             (8),
		.ENABLE_CSR_INTF                       (1),
		.DRIVER_INDEX                          (0),
		.DEVICE_FAMILY                         ("Agilex"),
		.FAST_CLIP_RECOVERY                    (1),
		.NUM_ADDR_FIELDS                       (1),
		.ADDR_FIELD_0_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_FIELD_1_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_FIELD_2_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_FIELD_3_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_FIELD_4_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_FIELD_5_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_FIELD_6_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_FIELD_7_MASK                     (64'b1111111111111111111111111111111111111111111111111111111111111111),
		.ADDR_ALU_ARG_WIDTH                    (32),
		.NUM_DQ_ALUS                           (2),
		.NUM_DM_ALUS                           (2),
		.DATA_DQ_RATIO                         (8),
		.USE_AWLOCK                            (1),
		.USE_AWCACHE                           (1),
		.USE_AWPROT                            (1),
		.USE_AWQOS                             (0),
		.USE_AWREGION                          (0),
		.USE_AWUSER                            (1),
		.USE_ARLOCK                            (1),
		.USE_ARCACHE                           (1),
		.USE_ARPROT                            (1),
		.USE_ARQOS                             (0),
		.USE_ARREGION                          (0),
		.USE_ARUSER                            (1),
		.USE_BUSER                             (0),
		.PORT_HYDRA_DRIVER_SYNC_POST_OUT_WIDTH (1),
		.PORT_HYDRA_DRIVER_SYNC_POST_IN_WIDTH  (1),
		.PORT_HYDRA_DRIVER_SYNC_WAIT_OUT_WIDTH (1),
		.PORT_HYDRA_DRIVER_SYNC_WAIT_IN_WIDTH  (1),
		.PORT_HYDRA_AXI4L_AWADDR_WIDTH         (24),
		.PORT_HYDRA_AXI4L_AWPROT_WIDTH         (3),
		.PORT_HYDRA_AXI4L_ARADDR_WIDTH         (24),
		.PORT_HYDRA_AXI4L_ARPROT_WIDTH         (3),
		.PORT_HYDRA_AXI4L_WDATA_WIDTH          (32),
		.PORT_HYDRA_AXI4L_WSTRB_WIDTH          (4),
		.PORT_HYDRA_AXI4L_BRESP_WIDTH          (2),
		.PORT_HYDRA_AXI4L_RDATA_WIDTH          (32),
		.PORT_HYDRA_AXI4L_RRESP_WIDTH          (2),
		.PORT_HYDRA_AXI4_AWID_WIDTH            (7),
		.PORT_HYDRA_AXI4_AWADDR_WIDTH          (32),
		.PORT_HYDRA_AXI4_AWLEN_WIDTH           (8),
		.PORT_HYDRA_AXI4_AWSIZE_WIDTH          (3),
		.PORT_HYDRA_AXI4_AWBURST_WIDTH         (2),
		.PORT_HYDRA_AXI4_AWLOCK_WIDTH          (1),
		.PORT_HYDRA_AXI4_AWCACHE_WIDTH         (4),
		.PORT_HYDRA_AXI4_AWPROT_WIDTH          (3),
		.PORT_HYDRA_AXI4_AWQOS_WIDTH           (4),
		.PORT_HYDRA_AXI4_AWREGION_WIDTH        (4),
		.PORT_HYDRA_AXI4_AWUSER_WIDTH          (1),
		.PORT_HYDRA_AXI4_ARID_WIDTH            (7),
		.PORT_HYDRA_AXI4_ARADDR_WIDTH          (32),
		.PORT_HYDRA_AXI4_ARLEN_WIDTH           (8),
		.PORT_HYDRA_AXI4_ARSIZE_WIDTH          (3),
		.PORT_HYDRA_AXI4_ARBURST_WIDTH         (2),
		.PORT_HYDRA_AXI4_ARLOCK_WIDTH          (1),
		.PORT_HYDRA_AXI4_ARCACHE_WIDTH         (4),
		.PORT_HYDRA_AXI4_ARPROT_WIDTH          (3),
		.PORT_HYDRA_AXI4_ARQOS_WIDTH           (4),
		.PORT_HYDRA_AXI4_ARREGION_WIDTH        (4),
		.PORT_HYDRA_AXI4_ARUSER_WIDTH          (1),
		.PORT_HYDRA_AXI4_WDATA_WIDTH           (256),
		.PORT_HYDRA_AXI4_WUSER_WIDTH           (1),
		.PORT_HYDRA_AXI4_WSTRB_WIDTH           (32),
		.PORT_HYDRA_AXI4_BID_WIDTH             (7),
		.PORT_HYDRA_AXI4_BRESP_WIDTH           (2),
		.PORT_HYDRA_AXI4_BUSER_WIDTH           (1),
		.PORT_HYDRA_AXI4_RID_WIDTH             (7),
		.PORT_HYDRA_AXI4_RDATA_WIDTH           (256),
		.PORT_HYDRA_AXI4_RUSER_WIDTH           (1),
		.PORT_HYDRA_AXI4_RRESP_WIDTH           (2)
	) driver0_mem_axi4 (
		.driver_run        (global_csr_driver_ctrl_0_driver_run),                  //   input,    width = 1, driver_ctrl.driver_run
		.driver_done       (driver0_mem_axi4_driver_ctrl_driver_done),             //  output,    width = 1,            .driver_done
		.driver_error      (driver0_mem_axi4_driver_ctrl_driver_error),            //  output,    width = 1,            .driver_error
		.driver_post_out   (driver0_mem_axi4_driver_sync_driver_post_out),         //  output,    width = 1, driver_sync.driver_post_out
		.driver_post_in    (global_csr_driver_sync_0_driver_post_in),              //   input,    width = 1,            .driver_post_in
		.driver_wait_out   (driver0_mem_axi4_driver_sync_driver_wait_out),         //  output,    width = 1,            .driver_wait_out
		.driver_wait_in    (global_csr_driver_sync_0_driver_wait_in),              //   input,    width = 1,            .driver_wait_in
		.csr_clk           (remote_intf_clk),                                      //   input,    width = 1,     csr_clk.clk
		.csr_reset_n       (remote_intf_reset_n),                                  //   input,    width = 1,   csr_reset.reset_n
		.csr_axi4l_awaddr  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awaddr),  //   input,   width = 24,   csr_axi4l.awaddr
		.csr_axi4l_awvalid (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awvalid), //   input,    width = 1,            .awvalid
		.csr_axi4l_awready (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awready), //  output,    width = 1,            .awready
		.csr_axi4l_awprot  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awprot),  //   input,    width = 3,            .awprot
		.csr_axi4l_araddr  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_araddr),  //   input,   width = 24,            .araddr
		.csr_axi4l_arvalid (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arvalid), //   input,    width = 1,            .arvalid
		.csr_axi4l_arready (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arready), //  output,    width = 1,            .arready
		.csr_axi4l_arprot  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arprot),  //   input,    width = 3,            .arprot
		.csr_axi4l_wdata   (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wdata),   //   input,   width = 32,            .wdata
		.csr_axi4l_wstrb   (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wstrb),   //   input,    width = 4,            .wstrb
		.csr_axi4l_wvalid  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wvalid),  //   input,    width = 1,            .wvalid
		.csr_axi4l_wready  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wready),  //  output,    width = 1,            .wready
		.csr_axi4l_bresp   (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bresp),   //  output,    width = 2,            .bresp
		.csr_axi4l_bvalid  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bvalid),  //  output,    width = 1,            .bvalid
		.csr_axi4l_bready  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bready),  //   input,    width = 1,            .bready
		.csr_axi4l_rdata   (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rdata),   //  output,   width = 32,            .rdata
		.csr_axi4l_rresp   (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rresp),   //  output,    width = 2,            .rresp
		.csr_axi4l_rvalid  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rvalid),  //  output,    width = 1,            .rvalid
		.csr_axi4l_rready  (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rready),  //   input,    width = 1,            .rready
		.clk               (driver0_clk),                                          //   input,    width = 1,         clk.clk
		.reset_n           (driver0_reset_n),                                      //   input,    width = 1,       reset.reset_n
		.axi4_awready      (driver0_axi4_awready),                                 //   input,    width = 1,        axi4.awready
		.axi4_awvalid      (driver0_axi4_awvalid),                                 //  output,    width = 1,            .awvalid
		.axi4_awid         (driver0_axi4_awid),                                    //  output,    width = 7,            .awid
		.axi4_awaddr       (driver0_axi4_awaddr),                                  //  output,   width = 32,            .awaddr
		.axi4_awlen        (driver0_axi4_awlen),                                   //  output,    width = 8,            .awlen
		.axi4_awsize       (driver0_axi4_awsize),                                  //  output,    width = 3,            .awsize
		.axi4_awburst      (driver0_axi4_awburst),                                 //  output,    width = 2,            .awburst
		.axi4_awlock       (driver0_axi4_awlock),                                  //  output,    width = 1,            .awlock
		.axi4_awcache      (driver0_axi4_awcache),                                 //  output,    width = 4,            .awcache
		.axi4_awprot       (driver0_axi4_awprot),                                  //  output,    width = 3,            .awprot
		.axi4_awuser       (driver0_axi4_awuser),                                  //  output,    width = 1,            .awuser
		.axi4_arready      (driver0_axi4_arready),                                 //   input,    width = 1,            .arready
		.axi4_arvalid      (driver0_axi4_arvalid),                                 //  output,    width = 1,            .arvalid
		.axi4_arid         (driver0_axi4_arid),                                    //  output,    width = 7,            .arid
		.axi4_araddr       (driver0_axi4_araddr),                                  //  output,   width = 32,            .araddr
		.axi4_arlen        (driver0_axi4_arlen),                                   //  output,    width = 8,            .arlen
		.axi4_arsize       (driver0_axi4_arsize),                                  //  output,    width = 3,            .arsize
		.axi4_arburst      (driver0_axi4_arburst),                                 //  output,    width = 2,            .arburst
		.axi4_arlock       (driver0_axi4_arlock),                                  //  output,    width = 1,            .arlock
		.axi4_arcache      (driver0_axi4_arcache),                                 //  output,    width = 4,            .arcache
		.axi4_arprot       (driver0_axi4_arprot),                                  //  output,    width = 3,            .arprot
		.axi4_aruser       (driver0_axi4_aruser),                                  //  output,    width = 1,            .aruser
		.axi4_wready       (driver0_axi4_wready),                                  //   input,    width = 1,            .wready
		.axi4_wvalid       (driver0_axi4_wvalid),                                  //  output,    width = 1,            .wvalid
		.axi4_wdata        (driver0_axi4_wdata),                                   //  output,  width = 256,            .wdata
		.axi4_wstrb        (driver0_axi4_wstrb),                                   //  output,   width = 32,            .wstrb
		.axi4_wlast        (driver0_axi4_wlast),                                   //  output,    width = 1,            .wlast
		.axi4_bready       (driver0_axi4_bready),                                  //  output,    width = 1,            .bready
		.axi4_bvalid       (driver0_axi4_bvalid),                                  //   input,    width = 1,            .bvalid
		.axi4_bid          (driver0_axi4_bid),                                     //   input,    width = 7,            .bid
		.axi4_bresp        (driver0_axi4_bresp),                                   //   input,    width = 2,            .bresp
		.axi4_rready       (driver0_axi4_rready),                                  //  output,    width = 1,            .rready
		.axi4_rvalid       (driver0_axi4_rvalid),                                  //   input,    width = 1,            .rvalid
		.axi4_rid          (driver0_axi4_rid),                                     //   input,    width = 7,            .rid
		.axi4_rdata        (driver0_axi4_rdata),                                   //   input,  width = 256,            .rdata
		.axi4_rresp        (driver0_axi4_rresp),                                   //   input,    width = 2,            .rresp
		.axi4_rlast        (driver0_axi4_rlast),                                   //   input,    width = 1,            .rlast
		.axi4_awqos        (),                                                     // (terminated),                           
		.axi4_awregion     (),                                                     // (terminated),                           
		.axi4_arqos        (),                                                     // (terminated),                           
		.axi4_arregion     (),                                                     // (terminated),                           
		.axi4_wuser        (),                                                     // (terminated),                           
		.axi4_buser        (1'b0),                                                 // (terminated),                           
		.axi4_ruser        (1'b0)                                                  // (terminated),                           
	);

	ed_sim_traffic_generator_altera_mm_interconnect_1920_rqcbspq mm_interconnect_0 (
		.global_csr_apb3_paddr                                       (mm_interconnect_0_global_csr_apb3_paddr),   //  output,  width = 12,                                       global_csr_apb3.paddr
		.global_csr_apb3_psel                                        (mm_interconnect_0_global_csr_apb3_psel),    //  output,   width = 1,                                                      .psel
		.global_csr_apb3_penable                                     (mm_interconnect_0_global_csr_apb3_penable), //  output,   width = 1,                                                      .penable
		.global_csr_apb3_pwrite                                      (mm_interconnect_0_global_csr_apb3_pwrite),  //  output,   width = 1,                                                      .pwrite
		.global_csr_apb3_pwdata                                      (mm_interconnect_0_global_csr_apb3_pwdata),  //  output,  width = 32,                                                      .pwdata
		.global_csr_apb3_prdata                                      (mm_interconnect_0_global_csr_apb3_prdata),  //   input,  width = 32,                                                      .prdata
		.global_csr_apb3_pslverr                                     (mm_interconnect_0_global_csr_apb3_pslverr), //   input,   width = 1,                                                      .pslverr
		.global_csr_apb3_pready                                      (mm_interconnect_0_global_csr_apb3_pready),  //   input,   width = 1,                                                      .pready
		.global_csr_axi_bridge_m0_awaddr                             (global_csr_axi_bridge_m0_awaddr),           //   input,  width = 12,                              global_csr_axi_bridge_m0.awaddr
		.global_csr_axi_bridge_m0_awprot                             (global_csr_axi_bridge_m0_awprot),           //   input,   width = 3,                                                      .awprot
		.global_csr_axi_bridge_m0_awvalid                            (global_csr_axi_bridge_m0_awvalid),          //   input,   width = 1,                                                      .awvalid
		.global_csr_axi_bridge_m0_awready                            (global_csr_axi_bridge_m0_awready),          //  output,   width = 1,                                                      .awready
		.global_csr_axi_bridge_m0_wdata                              (global_csr_axi_bridge_m0_wdata),            //   input,  width = 32,                                                      .wdata
		.global_csr_axi_bridge_m0_wstrb                              (global_csr_axi_bridge_m0_wstrb),            //   input,   width = 4,                                                      .wstrb
		.global_csr_axi_bridge_m0_wvalid                             (global_csr_axi_bridge_m0_wvalid),           //   input,   width = 1,                                                      .wvalid
		.global_csr_axi_bridge_m0_wready                             (global_csr_axi_bridge_m0_wready),           //  output,   width = 1,                                                      .wready
		.global_csr_axi_bridge_m0_bresp                              (global_csr_axi_bridge_m0_bresp),            //  output,   width = 2,                                                      .bresp
		.global_csr_axi_bridge_m0_bvalid                             (global_csr_axi_bridge_m0_bvalid),           //  output,   width = 1,                                                      .bvalid
		.global_csr_axi_bridge_m0_bready                             (global_csr_axi_bridge_m0_bready),           //   input,   width = 1,                                                      .bready
		.global_csr_axi_bridge_m0_araddr                             (global_csr_axi_bridge_m0_araddr),           //   input,  width = 12,                                                      .araddr
		.global_csr_axi_bridge_m0_arprot                             (global_csr_axi_bridge_m0_arprot),           //   input,   width = 3,                                                      .arprot
		.global_csr_axi_bridge_m0_arvalid                            (global_csr_axi_bridge_m0_arvalid),          //   input,   width = 1,                                                      .arvalid
		.global_csr_axi_bridge_m0_arready                            (global_csr_axi_bridge_m0_arready),          //  output,   width = 1,                                                      .arready
		.global_csr_axi_bridge_m0_rdata                              (global_csr_axi_bridge_m0_rdata),            //  output,  width = 32,                                                      .rdata
		.global_csr_axi_bridge_m0_rresp                              (global_csr_axi_bridge_m0_rresp),            //  output,   width = 2,                                                      .rresp
		.global_csr_axi_bridge_m0_rvalid                             (global_csr_axi_bridge_m0_rvalid),           //  output,   width = 1,                                                      .rvalid
		.global_csr_axi_bridge_m0_rready                             (global_csr_axi_bridge_m0_rready),           //   input,   width = 1,                                                      .rready
		.global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),            //   input,   width = 1, global_csr_axi_bridge_clk_reset_reset_bridge_in_reset.reset
		.remote_intf_clk_bridge_out_clk_clk                          (remote_intf_clk)                            //   input,   width = 1,                        remote_intf_clk_bridge_out_clk.clk
	);

	ed_sim_traffic_generator_altera_mm_interconnect_1920_vtrezla mm_interconnect_1 (
		.remote_access_jamb_master_address                                      (remote_access_jamb_master_address),                    //   input,  width = 32,                                        remote_access_jamb_master.address
		.remote_access_jamb_master_waitrequest                                  (remote_access_jamb_master_waitrequest),                //  output,   width = 1,                                                                 .waitrequest
		.remote_access_jamb_master_byteenable                                   (remote_access_jamb_master_byteenable),                 //   input,   width = 4,                                                                 .byteenable
		.remote_access_jamb_master_read                                         (remote_access_jamb_master_read),                       //   input,   width = 1,                                                                 .read
		.remote_access_jamb_master_readdata                                     (remote_access_jamb_master_readdata),                   //  output,  width = 32,                                                                 .readdata
		.remote_access_jamb_master_readdatavalid                                (remote_access_jamb_master_readdatavalid),              //  output,   width = 1,                                                                 .readdatavalid
		.remote_access_jamb_master_write                                        (remote_access_jamb_master_write),                      //   input,   width = 1,                                                                 .write
		.remote_access_jamb_master_writedata                                    (remote_access_jamb_master_writedata),                  //   input,  width = 32,                                                                 .writedata
		.global_csr_axi_bridge_s0_awaddr                                        (mm_interconnect_1_global_csr_axi_bridge_s0_awaddr),    //  output,  width = 12,                                         global_csr_axi_bridge_s0.awaddr
		.global_csr_axi_bridge_s0_awprot                                        (mm_interconnect_1_global_csr_axi_bridge_s0_awprot),    //  output,   width = 3,                                                                 .awprot
		.global_csr_axi_bridge_s0_awvalid                                       (mm_interconnect_1_global_csr_axi_bridge_s0_awvalid),   //  output,   width = 1,                                                                 .awvalid
		.global_csr_axi_bridge_s0_awready                                       (mm_interconnect_1_global_csr_axi_bridge_s0_awready),   //   input,   width = 1,                                                                 .awready
		.global_csr_axi_bridge_s0_wdata                                         (mm_interconnect_1_global_csr_axi_bridge_s0_wdata),     //  output,  width = 32,                                                                 .wdata
		.global_csr_axi_bridge_s0_wstrb                                         (mm_interconnect_1_global_csr_axi_bridge_s0_wstrb),     //  output,   width = 4,                                                                 .wstrb
		.global_csr_axi_bridge_s0_wvalid                                        (mm_interconnect_1_global_csr_axi_bridge_s0_wvalid),    //  output,   width = 1,                                                                 .wvalid
		.global_csr_axi_bridge_s0_wready                                        (mm_interconnect_1_global_csr_axi_bridge_s0_wready),    //   input,   width = 1,                                                                 .wready
		.global_csr_axi_bridge_s0_bresp                                         (mm_interconnect_1_global_csr_axi_bridge_s0_bresp),     //   input,   width = 2,                                                                 .bresp
		.global_csr_axi_bridge_s0_bvalid                                        (mm_interconnect_1_global_csr_axi_bridge_s0_bvalid),    //   input,   width = 1,                                                                 .bvalid
		.global_csr_axi_bridge_s0_bready                                        (mm_interconnect_1_global_csr_axi_bridge_s0_bready),    //  output,   width = 1,                                                                 .bready
		.global_csr_axi_bridge_s0_araddr                                        (mm_interconnect_1_global_csr_axi_bridge_s0_araddr),    //  output,  width = 12,                                                                 .araddr
		.global_csr_axi_bridge_s0_arprot                                        (mm_interconnect_1_global_csr_axi_bridge_s0_arprot),    //  output,   width = 3,                                                                 .arprot
		.global_csr_axi_bridge_s0_arvalid                                       (mm_interconnect_1_global_csr_axi_bridge_s0_arvalid),   //  output,   width = 1,                                                                 .arvalid
		.global_csr_axi_bridge_s0_arready                                       (mm_interconnect_1_global_csr_axi_bridge_s0_arready),   //   input,   width = 1,                                                                 .arready
		.global_csr_axi_bridge_s0_rdata                                         (mm_interconnect_1_global_csr_axi_bridge_s0_rdata),     //   input,  width = 32,                                                                 .rdata
		.global_csr_axi_bridge_s0_rresp                                         (mm_interconnect_1_global_csr_axi_bridge_s0_rresp),     //   input,   width = 2,                                                                 .rresp
		.global_csr_axi_bridge_s0_rvalid                                        (mm_interconnect_1_global_csr_axi_bridge_s0_rvalid),    //   input,   width = 1,                                                                 .rvalid
		.global_csr_axi_bridge_s0_rready                                        (mm_interconnect_1_global_csr_axi_bridge_s0_rready),    //  output,   width = 1,                                                                 .rready
		.driver0_mem_axi4_csr_axi4l_awaddr                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awaddr),  //  output,  width = 24,                                       driver0_mem_axi4_csr_axi4l.awaddr
		.driver0_mem_axi4_csr_axi4l_awprot                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awprot),  //  output,   width = 3,                                                                 .awprot
		.driver0_mem_axi4_csr_axi4l_awvalid                                     (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awvalid), //  output,   width = 1,                                                                 .awvalid
		.driver0_mem_axi4_csr_axi4l_awready                                     (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_awready), //   input,   width = 1,                                                                 .awready
		.driver0_mem_axi4_csr_axi4l_wdata                                       (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wdata),   //  output,  width = 32,                                                                 .wdata
		.driver0_mem_axi4_csr_axi4l_wstrb                                       (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wstrb),   //  output,   width = 4,                                                                 .wstrb
		.driver0_mem_axi4_csr_axi4l_wvalid                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wvalid),  //  output,   width = 1,                                                                 .wvalid
		.driver0_mem_axi4_csr_axi4l_wready                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_wready),  //   input,   width = 1,                                                                 .wready
		.driver0_mem_axi4_csr_axi4l_bresp                                       (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bresp),   //   input,   width = 2,                                                                 .bresp
		.driver0_mem_axi4_csr_axi4l_bvalid                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bvalid),  //   input,   width = 1,                                                                 .bvalid
		.driver0_mem_axi4_csr_axi4l_bready                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_bready),  //  output,   width = 1,                                                                 .bready
		.driver0_mem_axi4_csr_axi4l_araddr                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_araddr),  //  output,  width = 24,                                                                 .araddr
		.driver0_mem_axi4_csr_axi4l_arprot                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arprot),  //  output,   width = 3,                                                                 .arprot
		.driver0_mem_axi4_csr_axi4l_arvalid                                     (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arvalid), //  output,   width = 1,                                                                 .arvalid
		.driver0_mem_axi4_csr_axi4l_arready                                     (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_arready), //   input,   width = 1,                                                                 .arready
		.driver0_mem_axi4_csr_axi4l_rdata                                       (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rdata),   //   input,  width = 32,                                                                 .rdata
		.driver0_mem_axi4_csr_axi4l_rresp                                       (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rresp),   //   input,   width = 2,                                                                 .rresp
		.driver0_mem_axi4_csr_axi4l_rvalid                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rvalid),  //   input,   width = 1,                                                                 .rvalid
		.driver0_mem_axi4_csr_axi4l_rready                                      (mm_interconnect_1_driver0_mem_axi4_csr_axi4l_rready),  //  output,   width = 1,                                                                 .rready
		.global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset            (rst_controller_reset_out_reset),                       //   input,   width = 1,            global_csr_axi_bridge_clk_reset_reset_bridge_in_reset.reset
		.remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                   //   input,   width = 1, remote_access_jamb_master_translator_reset_reset_bridge_in_reset.reset
		.remote_intf_clk_bridge_out_clk_clk                                     (remote_intf_clk)                                       //   input,   width = 1,                                   remote_intf_clk_bridge_out_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~remote_intf_reset_n),           //   input,  width = 1, reset_in0.reset
		.clk            (remote_intf_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~remote_intf_reset_n),               //   input,  width = 1, reset_in0.reset
		.clk            (remote_intf_clk),                    //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
