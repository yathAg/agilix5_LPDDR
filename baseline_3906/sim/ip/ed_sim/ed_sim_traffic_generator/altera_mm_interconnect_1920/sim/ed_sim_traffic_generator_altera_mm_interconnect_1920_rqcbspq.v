// ed_sim_traffic_generator_altera_mm_interconnect_1920_rqcbspq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.3.1 102

`timescale 1 ps / 1 ps
module ed_sim_traffic_generator_altera_mm_interconnect_1920_rqcbspq (
		output wire [11:0] global_csr_apb3_paddr,                                       //                                       global_csr_apb3.paddr
		output wire        global_csr_apb3_psel,                                        //                                                      .psel
		output wire        global_csr_apb3_penable,                                     //                                                      .penable
		output wire        global_csr_apb3_pwrite,                                      //                                                      .pwrite
		output wire [31:0] global_csr_apb3_pwdata,                                      //                                                      .pwdata
		input  wire [31:0] global_csr_apb3_prdata,                                      //                                                      .prdata
		input  wire        global_csr_apb3_pslverr,                                     //                                                      .pslverr
		input  wire        global_csr_apb3_pready,                                      //                                                      .pready
		input  wire [11:0] global_csr_axi_bridge_m0_awaddr,                             //                              global_csr_axi_bridge_m0.awaddr
		input  wire [2:0]  global_csr_axi_bridge_m0_awprot,                             //                                                      .awprot
		input  wire        global_csr_axi_bridge_m0_awvalid,                            //                                                      .awvalid
		output wire        global_csr_axi_bridge_m0_awready,                            //                                                      .awready
		input  wire [31:0] global_csr_axi_bridge_m0_wdata,                              //                                                      .wdata
		input  wire [3:0]  global_csr_axi_bridge_m0_wstrb,                              //                                                      .wstrb
		input  wire        global_csr_axi_bridge_m0_wvalid,                             //                                                      .wvalid
		output wire        global_csr_axi_bridge_m0_wready,                             //                                                      .wready
		output wire [1:0]  global_csr_axi_bridge_m0_bresp,                              //                                                      .bresp
		output wire        global_csr_axi_bridge_m0_bvalid,                             //                                                      .bvalid
		input  wire        global_csr_axi_bridge_m0_bready,                             //                                                      .bready
		input  wire [11:0] global_csr_axi_bridge_m0_araddr,                             //                                                      .araddr
		input  wire [2:0]  global_csr_axi_bridge_m0_arprot,                             //                                                      .arprot
		input  wire        global_csr_axi_bridge_m0_arvalid,                            //                                                      .arvalid
		output wire        global_csr_axi_bridge_m0_arready,                            //                                                      .arready
		output wire [31:0] global_csr_axi_bridge_m0_rdata,                              //                                                      .rdata
		output wire [1:0]  global_csr_axi_bridge_m0_rresp,                              //                                                      .rresp
		output wire        global_csr_axi_bridge_m0_rvalid,                             //                                                      .rvalid
		input  wire        global_csr_axi_bridge_m0_rready,                             //                                                      .rready
		input  wire        global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset, // global_csr_axi_bridge_clk_reset_reset_bridge_in_reset.reset,  Reset Input
		input  wire        remote_intf_clk_bridge_out_clk_clk                           //                        remote_intf_clk_bridge_out_clk.clk,    Clock Input
	);

	wire          rsp_mux_src_valid;                                     // rsp_mux:src_valid -> global_csr_axi_bridge_m0_agent:write_rp_valid
	wire  [106:0] rsp_mux_src_data;                                      // rsp_mux:src_data -> global_csr_axi_bridge_m0_agent:write_rp_data
	wire          rsp_mux_src_ready;                                     // global_csr_axi_bridge_m0_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                   // rsp_mux:src_channel -> global_csr_axi_bridge_m0_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                             // rsp_mux:src_startofpacket -> global_csr_axi_bridge_m0_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                               // rsp_mux:src_endofpacket -> global_csr_axi_bridge_m0_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                 // rsp_mux_001:src_valid -> global_csr_axi_bridge_m0_agent:read_rp_valid
	wire  [106:0] rsp_mux_001_src_data;                                  // rsp_mux_001:src_data -> global_csr_axi_bridge_m0_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                 // global_csr_axi_bridge_m0_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                               // rsp_mux_001:src_channel -> global_csr_axi_bridge_m0_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                         // rsp_mux_001:src_startofpacket -> global_csr_axi_bridge_m0_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                           // rsp_mux_001:src_endofpacket -> global_csr_axi_bridge_m0_agent:read_rp_endofpacket
	wire   [11:0] global_csr_apb3_agent_altera_apb_master_paddr;         // global_csr_apb3_agent:paddr -> global_csr_apb3_translator:s0_paddr
	wire          global_csr_apb3_agent_altera_apb_master_pready;        // global_csr_apb3_translator:s0_pready -> global_csr_apb3_agent:pready
	wire   [31:0] global_csr_apb3_agent_altera_apb_master_prdata;        // global_csr_apb3_translator:s0_prdata -> global_csr_apb3_agent:prdata
	wire          global_csr_apb3_agent_altera_apb_master_pslverr;       // global_csr_apb3_translator:s0_pslverr -> global_csr_apb3_agent:pslverr
	wire   [31:0] global_csr_apb3_agent_altera_apb_master_pwdata;        // global_csr_apb3_agent:pwdata -> global_csr_apb3_translator:s0_pwdata
	wire          global_csr_apb3_agent_altera_apb_master_penable;       // global_csr_apb3_agent:penable -> global_csr_apb3_translator:s0_penable
	wire          global_csr_apb3_agent_altera_apb_master_psel;          // global_csr_apb3_agent:psel -> global_csr_apb3_translator:s0_psel
	wire          global_csr_apb3_agent_altera_apb_master_pwrite;        // global_csr_apb3_agent:pwrite -> global_csr_apb3_translator:s0_pwrite
	wire          global_csr_apb3_agent_altera_apb_master_paddr31;       // global_csr_apb3_agent:paddr31 -> global_csr_apb3_translator:s0_paddr31
	wire          cmd_mux_src_valid;                                     // cmd_mux:src_valid -> global_csr_apb3_agent:cp_valid
	wire  [106:0] cmd_mux_src_data;                                      // cmd_mux:src_data -> global_csr_apb3_agent:cp_data
	wire          cmd_mux_src_ready;                                     // global_csr_apb3_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                   // cmd_mux:src_channel -> global_csr_apb3_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                             // cmd_mux:src_startofpacket -> global_csr_apb3_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                               // cmd_mux:src_endofpacket -> global_csr_apb3_agent:cp_endofpacket
	wire          global_csr_axi_bridge_m0_agent_write_cp_valid;         // global_csr_axi_bridge_m0_agent:write_cp_valid -> router:sink_valid
	wire  [106:0] global_csr_axi_bridge_m0_agent_write_cp_data;          // global_csr_axi_bridge_m0_agent:write_cp_data -> router:sink_data
	wire          global_csr_axi_bridge_m0_agent_write_cp_ready;         // router:sink_ready -> global_csr_axi_bridge_m0_agent:write_cp_ready
	wire          global_csr_axi_bridge_m0_agent_write_cp_startofpacket; // global_csr_axi_bridge_m0_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          global_csr_axi_bridge_m0_agent_write_cp_endofpacket;   // global_csr_axi_bridge_m0_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [106:0] router_src_data;                                       // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                      // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                    // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          global_csr_axi_bridge_m0_agent_read_cp_valid;          // global_csr_axi_bridge_m0_agent:read_cp_valid -> router_001:sink_valid
	wire  [106:0] global_csr_axi_bridge_m0_agent_read_cp_data;           // global_csr_axi_bridge_m0_agent:read_cp_data -> router_001:sink_data
	wire          global_csr_axi_bridge_m0_agent_read_cp_ready;          // router_001:sink_ready -> global_csr_axi_bridge_m0_agent:read_cp_ready
	wire          global_csr_axi_bridge_m0_agent_read_cp_startofpacket;  // global_csr_axi_bridge_m0_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          global_csr_axi_bridge_m0_agent_read_cp_endofpacket;    // global_csr_axi_bridge_m0_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                  // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [106:0] router_001_src_data;                                   // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                  // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                          // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                            // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          global_csr_apb3_agent_rp_valid;                        // global_csr_apb3_agent:rp_valid -> router_002:sink_valid
	wire  [106:0] global_csr_apb3_agent_rp_data;                         // global_csr_apb3_agent:rp_data -> router_002:sink_data
	wire          global_csr_apb3_agent_rp_ready;                        // router_002:sink_ready -> global_csr_apb3_agent:rp_ready
	wire          global_csr_apb3_agent_rp_startofpacket;                // global_csr_apb3_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          global_csr_apb3_agent_rp_endofpacket;                  // global_csr_apb3_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                  // router_002:src_valid -> rsp_demux:sink_valid
	wire  [106:0] router_002_src_data;                                   // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                  // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                          // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                            // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [106:0] cmd_demux_src0_data;                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                              // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [106:0] cmd_demux_001_src0_data;                               // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                              // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                            // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                      // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                        // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [106:0] rsp_demux_src0_data;                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                  // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [106:0] rsp_demux_src1_data;                                   // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                  // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                          // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                            // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket

	ed_sim_traffic_generator_altera_merlin_apb_translator_1920_6aahr2a #(
		.ADDR_WIDTH     (12),
		.DATA_WIDTH     (32),
		.USE_S0_PADDR31 (1),
		.USE_M0_PADDR31 (0),
		.USE_M0_PSLVERR (1)
	) global_csr_apb3_translator (
		.s0_paddr   (global_csr_apb3_agent_altera_apb_master_paddr),               //   input,  width = 12,        s0.paddr
		.s0_psel    (global_csr_apb3_agent_altera_apb_master_psel),                //   input,   width = 1,          .psel
		.s0_penable (global_csr_apb3_agent_altera_apb_master_penable),             //   input,   width = 1,          .penable
		.s0_pwrite  (global_csr_apb3_agent_altera_apb_master_pwrite),              //   input,   width = 1,          .pwrite
		.s0_pwdata  (global_csr_apb3_agent_altera_apb_master_pwdata),              //   input,  width = 32,          .pwdata
		.s0_prdata  (global_csr_apb3_agent_altera_apb_master_prdata),              //  output,  width = 32,          .prdata
		.s0_pslverr (global_csr_apb3_agent_altera_apb_master_pslverr),             //  output,   width = 1,          .pslverr
		.s0_pready  (global_csr_apb3_agent_altera_apb_master_pready),              //  output,   width = 1,          .pready
		.s0_paddr31 (global_csr_apb3_agent_altera_apb_master_paddr31),             //   input,   width = 1,          .paddr31
		.clk        (remote_intf_clk_bridge_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset      (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.m0_paddr   (global_csr_apb3_paddr),                                       //  output,  width = 12,        m0.paddr
		.m0_psel    (global_csr_apb3_psel),                                        //  output,   width = 1,          .psel
		.m0_penable (global_csr_apb3_penable),                                     //  output,   width = 1,          .penable
		.m0_pwrite  (global_csr_apb3_pwrite),                                      //  output,   width = 1,          .pwrite
		.m0_pwdata  (global_csr_apb3_pwdata),                                      //  output,  width = 32,          .pwdata
		.m0_prdata  (global_csr_apb3_prdata),                                      //   input,  width = 32,          .prdata
		.m0_pslverr (global_csr_apb3_pslverr),                                     //   input,   width = 1,          .pslverr
		.m0_pready  (global_csr_apb3_pready),                                      //   input,   width = 1,          .pready
		.m0_paddr31 ()                                                             // (terminated),                        
	);

	ed_sim_traffic_generator_altera_merlin_axi_master_ni_19100_y3ctica #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (12),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.SAI_WIDTH                 (1),
		.ADDRCHK_WIDTH             (1),
		.USER_DATA_WIDTH           (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (1),
		.AXI_VERSION               ("AXI4Lite"),
		.ACE_LITE_SUPPORT          (0),
		.ROLE_BASED_USER           (0),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (65),
		.PKT_CACHE_H               (76),
		.PKT_CACHE_L               (73),
		.PKT_ADDR_SIDEBAND_H       (63),
		.PKT_ADDR_SIDEBAND_L       (63),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (53),
		.PKT_TRANS_LOCK            (52),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (68),
		.PKT_THREAD_ID_H           (69),
		.PKT_THREAD_ID_L           (69),
		.PKT_QOS_L                 (66),
		.PKT_QOS_H                 (66),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_DATA_SIDEBAND_H       (64),
		.PKT_DATA_SIDEBAND_L       (64),
		.PKT_DOMAIN_H              (89),
		.PKT_DOMAIN_L              (88),
		.PKT_SNOOP_H               (87),
		.PKT_SNOOP_L               (84),
		.PKT_BARRIER_H             (83),
		.PKT_BARRIER_L             (82),
		.PKT_WUNIQUE               (90),
		.PKT_EOP_OOO               (97),
		.PKT_SOP_OOO               (98),
		.PKT_ATRACE                (104),
		.PKT_TRACE                 (105),
		.PKT_AWAKEUP               (106),
		.PKT_POISON_H              (91),
		.PKT_POISON_L              (91),
		.PKT_DATACHK_H             (92),
		.PKT_DATACHK_L             (92),
		.PKT_ADDRCHK_H             (95),
		.PKT_ADDRCHK_L             (94),
		.PKT_SAI_H                 (96),
		.PKT_SAI_L                 (96),
		.PKT_USER_DATA_H           (93),
		.PKT_USER_DATA_L           (93),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (2),
		.ID                        (0),
		.SYNC_RESET                (0),
		.DATA_USER_WIDTH           (1)
	) global_csr_axi_bridge_m0_agent (
		.aclk                   (remote_intf_clk_bridge_out_clk_clk),                           //   input,    width = 1,              clk.clk
		.aresetn                (~global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (global_csr_axi_bridge_m0_agent_write_cp_valid),                //  output,    width = 1,         write_cp.valid
		.write_cp_data          (global_csr_axi_bridge_m0_agent_write_cp_data),                 //  output,  width = 107,                 .data
		.write_cp_startofpacket (global_csr_axi_bridge_m0_agent_write_cp_startofpacket),        //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (global_csr_axi_bridge_m0_agent_write_cp_endofpacket),          //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (global_csr_axi_bridge_m0_agent_write_cp_ready),                //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                            //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                             //   input,  width = 107,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                          //   input,    width = 2,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                    //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                      //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                            //  output,    width = 1,                 .ready
		.read_cp_valid          (global_csr_axi_bridge_m0_agent_read_cp_valid),                 //  output,    width = 1,          read_cp.valid
		.read_cp_data           (global_csr_axi_bridge_m0_agent_read_cp_data),                  //  output,  width = 107,                 .data
		.read_cp_startofpacket  (global_csr_axi_bridge_m0_agent_read_cp_startofpacket),         //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (global_csr_axi_bridge_m0_agent_read_cp_endofpacket),           //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (global_csr_axi_bridge_m0_agent_read_cp_ready),                 //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                        //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                         //   input,  width = 107,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                      //   input,    width = 2,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                  //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                        //  output,    width = 1,                 .ready
		.awaddr                 (global_csr_axi_bridge_m0_awaddr),                              //   input,   width = 12, altera_axi_slave.awaddr
		.awprot                 (global_csr_axi_bridge_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awvalid                (global_csr_axi_bridge_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (global_csr_axi_bridge_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (global_csr_axi_bridge_m0_wdata),                               //   input,   width = 32,                 .wdata
		.wstrb                  (global_csr_axi_bridge_m0_wstrb),                               //   input,    width = 4,                 .wstrb
		.wvalid                 (global_csr_axi_bridge_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wready                 (global_csr_axi_bridge_m0_wready),                              //  output,    width = 1,                 .wready
		.bresp                  (global_csr_axi_bridge_m0_bresp),                               //  output,    width = 2,                 .bresp
		.bvalid                 (global_csr_axi_bridge_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (global_csr_axi_bridge_m0_bready),                              //   input,    width = 1,                 .bready
		.araddr                 (global_csr_axi_bridge_m0_araddr),                              //   input,   width = 12,                 .araddr
		.arprot                 (global_csr_axi_bridge_m0_arprot),                              //   input,    width = 3,                 .arprot
		.arvalid                (global_csr_axi_bridge_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (global_csr_axi_bridge_m0_arready),                             //  output,    width = 1,                 .arready
		.rdata                  (global_csr_axi_bridge_m0_rdata),                               //  output,   width = 32,                 .rdata
		.rresp                  (global_csr_axi_bridge_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rvalid                 (global_csr_axi_bridge_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (global_csr_axi_bridge_m0_rready),                              //   input,    width = 1,                 .rready
		.awuser_sai             (1'b0),                                                         // (terminated),                                
		.aruser_sai             (1'b0),                                                         // (terminated),                                
		.awlen                  (4'b0000),                                                      // (terminated),                                
		.awburst                (2'b01),                                                        // (terminated),                                
		.awlock                 (2'b00),                                                        // (terminated),                                
		.awcache                (4'b0000),                                                      // (terminated),                                
		.awqos                  (4'b0000),                                                      // (terminated),                                
		.awregion               (4'b0000),                                                      // (terminated),                                
		.wlast                  (1'b1),                                                         // (terminated),                                
		.arlen                  (4'b0000),                                                      // (terminated),                                
		.arburst                (2'b01),                                                        // (terminated),                                
		.arlock                 (2'b00),                                                        // (terminated),                                
		.arcache                (4'b0000),                                                      // (terminated),                                
		.arqos                  (4'b0000),                                                      // (terminated),                                
		.arregion               (4'b0000),                                                      // (terminated),                                
		.rlast                  (),                                                             // (terminated),                                
		.awuser_addrchk         (1'b0),                                                         // (terminated),                                
		.aruser_addrchk         (1'b0),                                                         // (terminated),                                
		.wuser_datachk          (4'b0000),                                                      // (terminated),                                
		.wuser_data             (1'b0),                                                         // (terminated),                                
		.wuser_poison           (1'b0),                                                         // (terminated),                                
		.ruser_datachk          (),                                                             // (terminated),                                
		.ruser_data             (),                                                             // (terminated),                                
		.ruser_poison           (),                                                             // (terminated),                                
		.awsize                 (3'b010),                                                       // (terminated),                                
		.arsize                 (3'b010),                                                       // (terminated),                                
		.awid                   (1'b0),                                                         // (terminated),                                
		.arid                   (1'b0),                                                         // (terminated),                                
		.bid                    (),                                                             // (terminated),                                
		.rid                    (),                                                             // (terminated),                                
		.awuser                 (1'b0),                                                         // (terminated),                                
		.wuser                  (1'b0),                                                         // (terminated),                                
		.aruser                 (1'b0),                                                         // (terminated),                                
		.buser                  (),                                                             // (terminated),                                
		.ruser                  (),                                                             // (terminated),                                
		.awakeup                (1'b0),                                                         // (terminated),                                
		.awtrace                (1'b0),                                                         // (terminated),                                
		.artrace                (1'b0),                                                         // (terminated),                                
		.wpoison                (1'b0),                                                         // (terminated),                                
		.wdatachk               (4'b0000),                                                      // (terminated),                                
		.wtrace                 (1'b0),                                                         // (terminated),                                
		.btrace                 (),                                                             // (terminated),                                
		.rpoison                (),                                                             // (terminated),                                
		.rdatachk               (),                                                             // (terminated),                                
		.rtrace                 (),                                                             // (terminated),                                
		.wid                    (1'b0),                                                         // (terminated),                                
		.arsnoop                (4'b0000),                                                      // (terminated),                                
		.ardomain               (2'b00),                                                        // (terminated),                                
		.arbar                  (2'b00),                                                        // (terminated),                                
		.awsnoop                (3'b000),                                                       // (terminated),                                
		.awdomain               (2'b00),                                                        // (terminated),                                
		.awbar                  (2'b00),                                                        // (terminated),                                
		.awunique               (1'b0)                                                          // (terminated),                                
	);

	ed_sim_traffic_generator_altera_merlin_apb_slave_agent_1940_4j3b5gq #(
		.ADDR_WIDTH                (12),
		.DATA_WIDTH                (32),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (65),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_TRANS_LOCK            (52),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (68),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_THREAD_ID_H           (69),
		.PKT_THREAD_ID_L           (69),
		.PKT_CACHE_H               (76),
		.PKT_CACHE_L               (73),
		.PKT_DATA_SIDEBAND_H       (64),
		.PKT_DATA_SIDEBAND_L       (64),
		.PKT_QOS_H                 (66),
		.PKT_QOS_L                 (66),
		.PKT_ADDR_SIDEBAND_H       (63),
		.PKT_ADDR_SIDEBAND_L       (63),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_TRANS_EXCLUSIVE       (53),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_ORI_BURST_SIZE_H      (81),
		.ST_CHANNEL_W              (2),
		.PKT_DOMAIN_H              (89),
		.PKT_DOMAIN_L              (88),
		.PKT_SNOOP_H               (87),
		.PKT_SNOOP_L               (84),
		.PKT_BARRIER_H             (83),
		.PKT_BARRIER_L             (82),
		.PKT_WUNIQUE               (90),
		.PKT_POISON_H              (91),
		.PKT_POISON_L              (91),
		.PKT_DATACHK_H             (92),
		.PKT_DATACHK_L             (92),
		.PKT_ADDRCHK_H             (95),
		.PKT_ADDRCHK_L             (94),
		.PKT_SAI_H                 (96),
		.PKT_SAI_L                 (96),
		.PKT_USER_DATA_H           (93),
		.PKT_USER_DATA_L           (93),
		.PKT_ATRACE                (104),
		.PKT_TRACE                 (105),
		.PKT_AWAKEUP               (106),
		.ROLE_BASED_USER           (0),
		.ENABLE_AXI5               (0),
		.USE_PKT_DATACHK           (0),
		.ST_DATA_W                 (107),
		.SYNC_RESET                (0)
	) global_csr_apb3_agent (
		.paddr            (global_csr_apb3_agent_altera_apb_master_paddr),               //  output,   width = 12, altera_apb_master.paddr
		.psel             (global_csr_apb3_agent_altera_apb_master_psel),                //  output,    width = 1,                  .psel
		.penable          (global_csr_apb3_agent_altera_apb_master_penable),             //  output,    width = 1,                  .penable
		.pwrite           (global_csr_apb3_agent_altera_apb_master_pwrite),              //  output,    width = 1,                  .pwrite
		.pwdata           (global_csr_apb3_agent_altera_apb_master_pwdata),              //  output,   width = 32,                  .pwdata
		.pready           (global_csr_apb3_agent_altera_apb_master_pready),              //   input,    width = 1,                  .pready
		.prdata           (global_csr_apb3_agent_altera_apb_master_prdata),              //   input,   width = 32,                  .prdata
		.pslverr          (global_csr_apb3_agent_altera_apb_master_pslverr),             //   input,    width = 1,                  .pslverr
		.paddr31          (global_csr_apb3_agent_altera_apb_master_paddr31),             //  output,    width = 1,                  .paddr31
		.cp_valid         (cmd_mux_src_valid),                                           //   input,    width = 1,                cp.valid
		.cp_ready         (cmd_mux_src_ready),                                           //  output,    width = 1,                  .ready
		.cp_data          (cmd_mux_src_data),                                            //   input,  width = 107,                  .data
		.cp_channel       (cmd_mux_src_channel),                                         //   input,    width = 2,                  .channel
		.cp_startofpacket (cmd_mux_src_startofpacket),                                   //   input,    width = 1,                  .startofpacket
		.cp_endofpacket   (cmd_mux_src_endofpacket),                                     //   input,    width = 1,                  .endofpacket
		.rp_valid         (global_csr_apb3_agent_rp_valid),                              //  output,    width = 1,                rp.valid
		.rp_ready         (global_csr_apb3_agent_rp_ready),                              //   input,    width = 1,                  .ready
		.rp_data          (global_csr_apb3_agent_rp_data),                               //  output,  width = 107,                  .data
		.rp_startofpacket (global_csr_apb3_agent_rp_startofpacket),                      //  output,    width = 1,                  .startofpacket
		.rp_endofpacket   (global_csr_apb3_agent_rp_endofpacket),                        //  output,    width = 1,                  .endofpacket
		.clk              (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,               clk.clk
		.reset            (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset)  //   input,    width = 1,         clk_reset.reset
	);

	ed_sim_traffic_generator_altera_merlin_router_1921_iegcfmq router (
		.sink_ready         (global_csr_axi_bridge_m0_agent_write_cp_ready),               //  output,    width = 1,      sink.ready
		.sink_valid         (global_csr_axi_bridge_m0_agent_write_cp_valid),               //   input,    width = 1,          .valid
		.sink_data          (global_csr_axi_bridge_m0_agent_write_cp_data),                //   input,  width = 107,          .data
		.sink_startofpacket (global_csr_axi_bridge_m0_agent_write_cp_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (global_csr_axi_bridge_m0_agent_write_cp_endofpacket),         //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                             //  output,  width = 107,          .data
		.src_channel        (router_src_channel),                                          //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_router_1921_iegcfmq router_001 (
		.sink_ready         (global_csr_axi_bridge_m0_agent_read_cp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (global_csr_axi_bridge_m0_agent_read_cp_valid),                //   input,    width = 1,          .valid
		.sink_data          (global_csr_axi_bridge_m0_agent_read_cp_data),                 //   input,  width = 107,          .data
		.sink_startofpacket (global_csr_axi_bridge_m0_agent_read_cp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (global_csr_axi_bridge_m0_agent_read_cp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                         //  output,  width = 107,          .data
		.src_channel        (router_001_src_channel),                                      //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_router_1921_ah5veci router_002 (
		.sink_ready         (global_csr_apb3_agent_rp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (global_csr_apb3_agent_rp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (global_csr_apb3_agent_rp_data),                               //   input,  width = 107,          .data
		.sink_startofpacket (global_csr_apb3_agent_rp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (global_csr_apb3_agent_rp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                         //  output,  width = 107,          .data
		.src_channel        (router_002_src_channel),                                      //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_demultiplexer_1921_bcyqn7i cmd_demux (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                          //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                             //   input,  width = 107,          .data
		.sink_startofpacket (router_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                            //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                        //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                        //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                         //  output,  width = 107,          .data
		.src0_channel       (cmd_demux_src0_channel),                                      //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_demultiplexer_1921_bcyqn7i cmd_demux_001 (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                      //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                         //   input,  width = 107,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                        //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                     //  output,  width = 107,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                  //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_multiplexer_1922_faztmpq cmd_mux (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                            //  output,  width = 107,          .data
		.src_channel         (cmd_mux_src_channel),                                         //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                      //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                    //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                  //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                     //   input,  width = 107,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_demultiplexer_1921_lpkcrti rsp_demux (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                      //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                         //   input,  width = 107,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                         //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_src0_channel),                                      //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                         //  output,  width = 107,          .data
		.src1_channel       (rsp_demux_src1_channel),                                      //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_multiplexer_1922_wwowo6i rsp_mux (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                            //  output,  width = 107,          .data
		.src_channel         (rsp_mux_src_channel),                                         //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                      //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                         //   input,  width = 107,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	ed_sim_traffic_generator_altera_merlin_multiplexer_1922_wwowo6i rsp_mux_001 (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                       //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                        //  output,  width = 107,          .data
		.src_channel         (rsp_mux_001_src_channel),                                     //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                      //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                                         //   input,  width = 107,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

endmodule
