// ed_synth_traffic_generator_altera_mm_interconnect_1920_vtrezla.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.3.1 102

`timescale 1 ps / 1 ps
module ed_synth_traffic_generator_altera_mm_interconnect_1920_vtrezla (
		input  wire [31:0] remote_access_jamb_master_address,                                      //                                        remote_access_jamb_master.address
		output wire        remote_access_jamb_master_waitrequest,                                  //                                                                 .waitrequest
		input  wire [3:0]  remote_access_jamb_master_byteenable,                                   //                                                                 .byteenable
		input  wire        remote_access_jamb_master_read,                                         //                                                                 .read
		output wire [31:0] remote_access_jamb_master_readdata,                                     //                                                                 .readdata
		output wire        remote_access_jamb_master_readdatavalid,                                //                                                                 .readdatavalid
		input  wire        remote_access_jamb_master_write,                                        //                                                                 .write
		input  wire [31:0] remote_access_jamb_master_writedata,                                    //                                                                 .writedata
		output wire [11:0] global_csr_axi_bridge_s0_awaddr,                                        //                                         global_csr_axi_bridge_s0.awaddr
		output wire [2:0]  global_csr_axi_bridge_s0_awprot,                                        //                                                                 .awprot
		output wire        global_csr_axi_bridge_s0_awvalid,                                       //                                                                 .awvalid
		input  wire        global_csr_axi_bridge_s0_awready,                                       //                                                                 .awready
		output wire [31:0] global_csr_axi_bridge_s0_wdata,                                         //                                                                 .wdata
		output wire [3:0]  global_csr_axi_bridge_s0_wstrb,                                         //                                                                 .wstrb
		output wire        global_csr_axi_bridge_s0_wvalid,                                        //                                                                 .wvalid
		input  wire        global_csr_axi_bridge_s0_wready,                                        //                                                                 .wready
		input  wire [1:0]  global_csr_axi_bridge_s0_bresp,                                         //                                                                 .bresp
		input  wire        global_csr_axi_bridge_s0_bvalid,                                        //                                                                 .bvalid
		output wire        global_csr_axi_bridge_s0_bready,                                        //                                                                 .bready
		output wire [11:0] global_csr_axi_bridge_s0_araddr,                                        //                                                                 .araddr
		output wire [2:0]  global_csr_axi_bridge_s0_arprot,                                        //                                                                 .arprot
		output wire        global_csr_axi_bridge_s0_arvalid,                                       //                                                                 .arvalid
		input  wire        global_csr_axi_bridge_s0_arready,                                       //                                                                 .arready
		input  wire [31:0] global_csr_axi_bridge_s0_rdata,                                         //                                                                 .rdata
		input  wire [1:0]  global_csr_axi_bridge_s0_rresp,                                         //                                                                 .rresp
		input  wire        global_csr_axi_bridge_s0_rvalid,                                        //                                                                 .rvalid
		output wire        global_csr_axi_bridge_s0_rready,                                        //                                                                 .rready
		output wire [23:0] driver0_mem_axi4_csr_axi4l_awaddr,                                      //                                       driver0_mem_axi4_csr_axi4l.awaddr
		output wire [2:0]  driver0_mem_axi4_csr_axi4l_awprot,                                      //                                                                 .awprot
		output wire        driver0_mem_axi4_csr_axi4l_awvalid,                                     //                                                                 .awvalid
		input  wire        driver0_mem_axi4_csr_axi4l_awready,                                     //                                                                 .awready
		output wire [31:0] driver0_mem_axi4_csr_axi4l_wdata,                                       //                                                                 .wdata
		output wire [3:0]  driver0_mem_axi4_csr_axi4l_wstrb,                                       //                                                                 .wstrb
		output wire        driver0_mem_axi4_csr_axi4l_wvalid,                                      //                                                                 .wvalid
		input  wire        driver0_mem_axi4_csr_axi4l_wready,                                      //                                                                 .wready
		input  wire [1:0]  driver0_mem_axi4_csr_axi4l_bresp,                                       //                                                                 .bresp
		input  wire        driver0_mem_axi4_csr_axi4l_bvalid,                                      //                                                                 .bvalid
		output wire        driver0_mem_axi4_csr_axi4l_bready,                                      //                                                                 .bready
		output wire [23:0] driver0_mem_axi4_csr_axi4l_araddr,                                      //                                                                 .araddr
		output wire [2:0]  driver0_mem_axi4_csr_axi4l_arprot,                                      //                                                                 .arprot
		output wire        driver0_mem_axi4_csr_axi4l_arvalid,                                     //                                                                 .arvalid
		input  wire        driver0_mem_axi4_csr_axi4l_arready,                                     //                                                                 .arready
		input  wire [31:0] driver0_mem_axi4_csr_axi4l_rdata,                                       //                                                                 .rdata
		input  wire [1:0]  driver0_mem_axi4_csr_axi4l_rresp,                                       //                                                                 .rresp
		input  wire        driver0_mem_axi4_csr_axi4l_rvalid,                                      //                                                                 .rvalid
		output wire        driver0_mem_axi4_csr_axi4l_rready,                                      //                                                                 .rready
		input  wire        global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset,            //            global_csr_axi_bridge_clk_reset_reset_bridge_in_reset.reset,        Reset Input
		input  wire        remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset, // remote_access_jamb_master_translator_reset_reset_bridge_in_reset.reset,        Reset Input
		input  wire        remote_intf_clk_bridge_out_clk_clk                                      //                                   remote_intf_clk_bridge_out_clk.clk,          Clock Input
	);

	wire          remote_access_jamb_master_translator_avalon_universal_master_0_waitrequest;   // remote_access_jamb_master_agent:av_waitrequest -> remote_access_jamb_master_translator:uav_waitrequest
	wire   [31:0] remote_access_jamb_master_translator_avalon_universal_master_0_readdata;      // remote_access_jamb_master_agent:av_readdata -> remote_access_jamb_master_translator:uav_readdata
	wire          remote_access_jamb_master_translator_avalon_universal_master_0_debugaccess;   // remote_access_jamb_master_translator:uav_debugaccess -> remote_access_jamb_master_agent:av_debugaccess
	wire   [31:0] remote_access_jamb_master_translator_avalon_universal_master_0_address;       // remote_access_jamb_master_translator:uav_address -> remote_access_jamb_master_agent:av_address
	wire          remote_access_jamb_master_translator_avalon_universal_master_0_read;          // remote_access_jamb_master_translator:uav_read -> remote_access_jamb_master_agent:av_read
	wire    [3:0] remote_access_jamb_master_translator_avalon_universal_master_0_byteenable;    // remote_access_jamb_master_translator:uav_byteenable -> remote_access_jamb_master_agent:av_byteenable
	wire          remote_access_jamb_master_translator_avalon_universal_master_0_readdatavalid; // remote_access_jamb_master_agent:av_readdatavalid -> remote_access_jamb_master_translator:uav_readdatavalid
	wire          remote_access_jamb_master_translator_avalon_universal_master_0_lock;          // remote_access_jamb_master_translator:uav_lock -> remote_access_jamb_master_agent:av_lock
	wire          remote_access_jamb_master_translator_avalon_universal_master_0_write;         // remote_access_jamb_master_translator:uav_write -> remote_access_jamb_master_agent:av_write
	wire   [31:0] remote_access_jamb_master_translator_avalon_universal_master_0_writedata;     // remote_access_jamb_master_translator:uav_writedata -> remote_access_jamb_master_agent:av_writedata
	wire    [2:0] remote_access_jamb_master_translator_avalon_universal_master_0_burstcount;    // remote_access_jamb_master_translator:uav_burstcount -> remote_access_jamb_master_agent:av_burstcount
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> global_csr_axi_bridge_s0_agent:write_cp_valid
	wire  [128:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> global_csr_axi_bridge_s0_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                            // global_csr_axi_bridge_s0_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> global_csr_axi_bridge_s0_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> global_csr_axi_bridge_s0_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> global_csr_axi_bridge_s0_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> global_csr_axi_bridge_s0_agent:read_cp_valid
	wire  [128:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> global_csr_axi_bridge_s0_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                        // global_csr_axi_bridge_s0_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> global_csr_axi_bridge_s0_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> global_csr_axi_bridge_s0_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> global_csr_axi_bridge_s0_agent:read_cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                        // cmd_mux_002:src_valid -> driver0_mem_axi4_csr_axi4l_agent:write_cp_valid
	wire  [128:0] cmd_mux_002_src_data;                                                         // cmd_mux_002:src_data -> driver0_mem_axi4_csr_axi4l_agent:write_cp_data
	wire          cmd_mux_002_src_ready;                                                        // driver0_mem_axi4_csr_axi4l_agent:write_cp_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                      // cmd_mux_002:src_channel -> driver0_mem_axi4_csr_axi4l_agent:write_cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                // cmd_mux_002:src_startofpacket -> driver0_mem_axi4_csr_axi4l_agent:write_cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                  // cmd_mux_002:src_endofpacket -> driver0_mem_axi4_csr_axi4l_agent:write_cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                        // cmd_mux_003:src_valid -> driver0_mem_axi4_csr_axi4l_agent:read_cp_valid
	wire  [128:0] cmd_mux_003_src_data;                                                         // cmd_mux_003:src_data -> driver0_mem_axi4_csr_axi4l_agent:read_cp_data
	wire          cmd_mux_003_src_ready;                                                        // driver0_mem_axi4_csr_axi4l_agent:read_cp_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                      // cmd_mux_003:src_channel -> driver0_mem_axi4_csr_axi4l_agent:read_cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                // cmd_mux_003:src_startofpacket -> driver0_mem_axi4_csr_axi4l_agent:read_cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                  // cmd_mux_003:src_endofpacket -> driver0_mem_axi4_csr_axi4l_agent:read_cp_endofpacket
	wire          remote_access_jamb_master_agent_cp_valid;                                     // remote_access_jamb_master_agent:cp_valid -> router:sink_valid
	wire  [128:0] remote_access_jamb_master_agent_cp_data;                                      // remote_access_jamb_master_agent:cp_data -> router:sink_data
	wire          remote_access_jamb_master_agent_cp_ready;                                     // router:sink_ready -> remote_access_jamb_master_agent:cp_ready
	wire          remote_access_jamb_master_agent_cp_startofpacket;                             // remote_access_jamb_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          remote_access_jamb_master_agent_cp_endofpacket;                               // remote_access_jamb_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          global_csr_axi_bridge_s0_agent_write_rp_valid;                                // global_csr_axi_bridge_s0_agent:write_rp_valid -> router_001:sink_valid
	wire  [128:0] global_csr_axi_bridge_s0_agent_write_rp_data;                                 // global_csr_axi_bridge_s0_agent:write_rp_data -> router_001:sink_data
	wire          global_csr_axi_bridge_s0_agent_write_rp_ready;                                // router_001:sink_ready -> global_csr_axi_bridge_s0_agent:write_rp_ready
	wire          global_csr_axi_bridge_s0_agent_write_rp_startofpacket;                        // global_csr_axi_bridge_s0_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          global_csr_axi_bridge_s0_agent_write_rp_endofpacket;                          // global_csr_axi_bridge_s0_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> rsp_demux:sink_valid
	wire  [128:0] router_001_src_data;                                                          // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                         // rsp_demux:sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                       // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          global_csr_axi_bridge_s0_agent_read_rp_valid;                                 // global_csr_axi_bridge_s0_agent:read_rp_valid -> router_002:sink_valid
	wire  [128:0] global_csr_axi_bridge_s0_agent_read_rp_data;                                  // global_csr_axi_bridge_s0_agent:read_rp_data -> router_002:sink_data
	wire          global_csr_axi_bridge_s0_agent_read_rp_ready;                                 // router_002:sink_ready -> global_csr_axi_bridge_s0_agent:read_rp_ready
	wire          global_csr_axi_bridge_s0_agent_read_rp_startofpacket;                         // global_csr_axi_bridge_s0_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          global_csr_axi_bridge_s0_agent_read_rp_endofpacket;                           // global_csr_axi_bridge_s0_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [128:0] router_002_src_data;                                                          // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                         // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                       // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          driver0_mem_axi4_csr_axi4l_agent_write_rp_valid;                              // driver0_mem_axi4_csr_axi4l_agent:write_rp_valid -> router_003:sink_valid
	wire  [128:0] driver0_mem_axi4_csr_axi4l_agent_write_rp_data;                               // driver0_mem_axi4_csr_axi4l_agent:write_rp_data -> router_003:sink_data
	wire          driver0_mem_axi4_csr_axi4l_agent_write_rp_ready;                              // router_003:sink_ready -> driver0_mem_axi4_csr_axi4l_agent:write_rp_ready
	wire          driver0_mem_axi4_csr_axi4l_agent_write_rp_startofpacket;                      // driver0_mem_axi4_csr_axi4l_agent:write_rp_startofpacket -> router_003:sink_startofpacket
	wire          driver0_mem_axi4_csr_axi4l_agent_write_rp_endofpacket;                        // driver0_mem_axi4_csr_axi4l_agent:write_rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                         // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [128:0] router_003_src_data;                                                          // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                         // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                       // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          driver0_mem_axi4_csr_axi4l_agent_read_rp_valid;                               // driver0_mem_axi4_csr_axi4l_agent:read_rp_valid -> router_004:sink_valid
	wire  [128:0] driver0_mem_axi4_csr_axi4l_agent_read_rp_data;                                // driver0_mem_axi4_csr_axi4l_agent:read_rp_data -> router_004:sink_data
	wire          driver0_mem_axi4_csr_axi4l_agent_read_rp_ready;                               // router_004:sink_ready -> driver0_mem_axi4_csr_axi4l_agent:read_rp_ready
	wire          driver0_mem_axi4_csr_axi4l_agent_read_rp_startofpacket;                       // driver0_mem_axi4_csr_axi4l_agent:read_rp_startofpacket -> router_004:sink_startofpacket
	wire          driver0_mem_axi4_csr_axi4l_agent_read_rp_endofpacket;                         // driver0_mem_axi4_csr_axi4l_agent:read_rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                         // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [128:0] router_004_src_data;                                                          // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                         // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                       // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                                 // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                                   // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> remote_access_jamb_master_limiter:cmd_sink_valid
	wire  [128:0] router_src_data;                                                              // router:src_data -> remote_access_jamb_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                             // remote_access_jamb_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                           // router:src_channel -> remote_access_jamb_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> remote_access_jamb_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> remote_access_jamb_master_limiter:cmd_sink_endofpacket
	wire  [128:0] remote_access_jamb_master_limiter_cmd_src_data;                               // remote_access_jamb_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          remote_access_jamb_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> remote_access_jamb_master_limiter:cmd_src_ready
	wire    [3:0] remote_access_jamb_master_limiter_cmd_src_channel;                            // remote_access_jamb_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          remote_access_jamb_master_limiter_cmd_src_startofpacket;                      // remote_access_jamb_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          remote_access_jamb_master_limiter_cmd_src_endofpacket;                        // remote_access_jamb_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> remote_access_jamb_master_limiter:rsp_sink_valid
	wire  [128:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> remote_access_jamb_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                            // remote_access_jamb_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> remote_access_jamb_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> remote_access_jamb_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> remote_access_jamb_master_limiter:rsp_sink_endofpacket
	wire          remote_access_jamb_master_limiter_rsp_src_valid;                              // remote_access_jamb_master_limiter:rsp_src_valid -> remote_access_jamb_master_agent:rp_valid
	wire  [128:0] remote_access_jamb_master_limiter_rsp_src_data;                               // remote_access_jamb_master_limiter:rsp_src_data -> remote_access_jamb_master_agent:rp_data
	wire          remote_access_jamb_master_limiter_rsp_src_ready;                              // remote_access_jamb_master_agent:rp_ready -> remote_access_jamb_master_limiter:rsp_src_ready
	wire    [3:0] remote_access_jamb_master_limiter_rsp_src_channel;                            // remote_access_jamb_master_limiter:rsp_src_channel -> remote_access_jamb_master_agent:rp_channel
	wire          remote_access_jamb_master_limiter_rsp_src_startofpacket;                      // remote_access_jamb_master_limiter:rsp_src_startofpacket -> remote_access_jamb_master_agent:rp_startofpacket
	wire          remote_access_jamb_master_limiter_rsp_src_endofpacket;                        // remote_access_jamb_master_limiter:rsp_src_endofpacket -> remote_access_jamb_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [128:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [128:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                         // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [128:0] cmd_demux_src2_data;                                                          // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                         // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                                       // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                 // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                   // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                         // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [128:0] cmd_demux_src3_data;                                                          // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                         // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                                       // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                 // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                   // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [128:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [128:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                     // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [128:0] rsp_demux_002_src0_data;                                                      // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                     // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                   // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                             // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                               // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                     // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [128:0] rsp_demux_003_src0_data;                                                      // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                     // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                   // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                             // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                               // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire    [3:0] remote_access_jamb_master_limiter_cmd_valid_data;                             // remote_access_jamb_master_limiter:cmd_src_valid -> cmd_demux:sink_valid

	ed_synth_traffic_generator_altera_merlin_master_translator_192_54w642y #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) remote_access_jamb_master_translator (
		.clk                    (remote_intf_clk_bridge_out_clk_clk),                                           //   input,   width = 1,                       clk.clk
		.reset                  (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (remote_access_jamb_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (remote_access_jamb_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (remote_access_jamb_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (remote_access_jamb_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (remote_access_jamb_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (remote_access_jamb_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (remote_access_jamb_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (remote_access_jamb_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (remote_access_jamb_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (remote_access_jamb_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (remote_access_jamb_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (remote_access_jamb_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (remote_access_jamb_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (remote_access_jamb_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (remote_access_jamb_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (remote_access_jamb_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (remote_access_jamb_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (remote_access_jamb_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (remote_access_jamb_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                         // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                         // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                         // (terminated),                                        
		.av_chipselect          (1'b0),                                                                         // (terminated),                                        
		.av_lock                (1'b0),                                                                         // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                         // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                         // (terminated),                                        
		.uav_clken              (),                                                                             // (terminated),                                        
		.av_clken               (1'b1),                                                                         // (terminated),                                        
		.uav_response           (2'b00),                                                                        // (terminated),                                        
		.av_response            (),                                                                             // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                         // (terminated),                                        
		.av_writeresponsevalid  ()                                                                              // (terminated),                                        
	);

	ed_synth_traffic_generator_altera_merlin_master_agent_1930_l64uqry #(
		.PKT_WUNIQUE               (110),
		.PKT_DOMAIN_H              (109),
		.PKT_DOMAIN_L              (108),
		.PKT_SNOOP_H               (107),
		.PKT_SNOOP_L               (104),
		.PKT_BARRIER_H             (103),
		.PKT_BARRIER_L             (102),
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (96),
		.PKT_CACHE_L               (93),
		.PKT_THREAD_ID_H           (89),
		.PKT_THREAD_ID_L           (89),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_POISON_H              (111),
		.PKT_POISON_L              (111),
		.PKT_DATACHK_H             (112),
		.PKT_DATACHK_L             (112),
		.PKT_ADDRCHK_H             (115),
		.PKT_ADDRCHK_L             (114),
		.PKT_SAI_H                 (116),
		.PKT_SAI_L                 (116),
		.PKT_USER_DATA_H           (113),
		.PKT_USER_DATA_L           (113),
		.PKT_ATRACE                (126),
		.PKT_TRACE                 (127),
		.PKT_AWAKEUP               (128),
		.ST_DATA_W                 (129),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0),
		.ENABLE_AXI5               (0)
	) remote_access_jamb_master_agent (
		.clk                   (remote_intf_clk_bridge_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                 (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (remote_access_jamb_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (remote_access_jamb_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (remote_access_jamb_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (remote_access_jamb_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (remote_access_jamb_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (remote_access_jamb_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (remote_access_jamb_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (remote_access_jamb_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (remote_access_jamb_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (remote_access_jamb_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (remote_access_jamb_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (remote_access_jamb_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (remote_access_jamb_master_agent_cp_data),                                      //  output,  width = 129,          .data
		.cp_startofpacket      (remote_access_jamb_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (remote_access_jamb_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (remote_access_jamb_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (remote_access_jamb_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (remote_access_jamb_master_limiter_rsp_src_data),                               //   input,  width = 129,          .data
		.rp_channel            (remote_access_jamb_master_limiter_rsp_src_channel),                            //   input,    width = 4,          .channel
		.rp_startofpacket      (remote_access_jamb_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (remote_access_jamb_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (remote_access_jamb_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                             // (terminated),                         
		.av_writeresponsevalid ()                                                                              // (terminated),                         
	);

	ed_synth_traffic_generator_altera_merlin_axi_slave_ni_19112_ykxseta #(
		.PKT_QOS_H                   (86),
		.PKT_QOS_L                   (86),
		.PKT_THREAD_ID_H             (89),
		.PKT_THREAD_ID_L             (89),
		.PKT_RESPONSE_STATUS_H       (98),
		.PKT_RESPONSE_STATUS_L       (97),
		.PKT_BEGIN_BURST             (85),
		.PKT_CACHE_H                 (96),
		.PKT_CACHE_L                 (93),
		.PKT_DATA_SIDEBAND_H         (84),
		.PKT_DATA_SIDEBAND_L         (84),
		.PKT_ADDR_SIDEBAND_H         (83),
		.PKT_ADDR_SIDEBAND_L         (83),
		.PKT_BURST_TYPE_H            (82),
		.PKT_BURST_TYPE_L            (81),
		.PKT_PROTECTION_H            (92),
		.PKT_PROTECTION_L            (90),
		.PKT_BURST_SIZE_H            (80),
		.PKT_BURST_SIZE_L            (78),
		.PKT_BURSTWRAP_H             (77),
		.PKT_BURSTWRAP_L             (77),
		.PKT_BYTE_CNT_H              (76),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (87),
		.PKT_SRC_ID_L                (87),
		.PKT_DEST_ID_H               (88),
		.PKT_DEST_ID_L               (88),
		.PKT_ORI_BURST_SIZE_L        (99),
		.PKT_ORI_BURST_SIZE_H        (101),
		.PKT_DOMAIN_L                (108),
		.PKT_DOMAIN_H                (109),
		.PKT_SNOOP_L                 (104),
		.PKT_SNOOP_H                 (107),
		.PKT_BARRIER_L               (102),
		.PKT_BARRIER_H               (103),
		.PKT_WUNIQUE                 (110),
		.PKT_EOP_OOO                 (117),
		.PKT_SOP_OOO                 (118),
		.PKT_AWAKEUP                 (128),
		.PKT_ATRACE                  (126),
		.PKT_TRACE                   (127),
		.PKT_POISON_H                (111),
		.PKT_POISON_L                (111),
		.PKT_DATACHK_H               (112),
		.PKT_DATACHK_L               (112),
		.PKT_ADDRCHK_H               (115),
		.PKT_ADDRCHK_L               (114),
		.PKT_SAI_H                   (116),
		.PKT_SAI_L                   (116),
		.PKT_USER_DATA_H             (113),
		.PKT_USER_DATA_L             (113),
		.SAI_WIDTH                   (1),
		.ADDRCHK_WIDTH               (1),
		.USER_DATA_WIDTH             (1),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (129),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (4),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (16),
		.READ_ACCEPTANCE_CAPABILITY  (16),
		.USE_PKT_DATACHK             (0),
		.USE_PKT_ADDRCHK             (0),
		.SYNC_RESET                  (0),
		.USE_MEMORY_BLOCKS           (0),
		.ROLE_BASED_USER             (0),
		.ENABLE_OOO                  (0),
		.REORDER_BUFFER              (0)
	) global_csr_axi_bridge_s0_agent (
		.aclk                   (remote_intf_clk_bridge_out_clk_clk),                           //   input,    width = 1,        clock_sink.clk
		.aresetn                (~global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                        //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                        //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                         //   input,  width = 129,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                      //   input,    width = 4,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                  //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                            //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                            //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                             //   input,  width = 129,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                          //   input,    width = 4,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                    //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                      //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (global_csr_axi_bridge_s0_agent_read_rp_ready),                 //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (global_csr_axi_bridge_s0_agent_read_rp_valid),                 //  output,    width = 1,                  .valid
		.read_rp_data           (global_csr_axi_bridge_s0_agent_read_rp_data),                  //  output,  width = 129,                  .data
		.read_rp_startofpacket  (global_csr_axi_bridge_s0_agent_read_rp_startofpacket),         //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (global_csr_axi_bridge_s0_agent_read_rp_endofpacket),           //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (global_csr_axi_bridge_s0_agent_write_rp_ready),                //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (global_csr_axi_bridge_s0_agent_write_rp_valid),                //  output,    width = 1,                  .valid
		.write_rp_data          (global_csr_axi_bridge_s0_agent_write_rp_data),                 //  output,  width = 129,                  .data
		.write_rp_startofpacket (global_csr_axi_bridge_s0_agent_write_rp_startofpacket),        //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (global_csr_axi_bridge_s0_agent_write_rp_endofpacket),          //  output,    width = 1,                  .endofpacket
		.awaddr                 (global_csr_axi_bridge_s0_awaddr),                              //  output,   width = 12, altera_axi_master.awaddr
		.awprot                 (global_csr_axi_bridge_s0_awprot),                              //  output,    width = 3,                  .awprot
		.awvalid                (global_csr_axi_bridge_s0_awvalid),                             //  output,    width = 1,                  .awvalid
		.awready                (global_csr_axi_bridge_s0_awready),                             //   input,    width = 1,                  .awready
		.wdata                  (global_csr_axi_bridge_s0_wdata),                               //  output,   width = 32,                  .wdata
		.wstrb                  (global_csr_axi_bridge_s0_wstrb),                               //  output,    width = 4,                  .wstrb
		.wvalid                 (global_csr_axi_bridge_s0_wvalid),                              //  output,    width = 1,                  .wvalid
		.wready                 (global_csr_axi_bridge_s0_wready),                              //   input,    width = 1,                  .wready
		.bresp                  (global_csr_axi_bridge_s0_bresp),                               //   input,    width = 2,                  .bresp
		.bvalid                 (global_csr_axi_bridge_s0_bvalid),                              //   input,    width = 1,                  .bvalid
		.bready                 (global_csr_axi_bridge_s0_bready),                              //  output,    width = 1,                  .bready
		.araddr                 (global_csr_axi_bridge_s0_araddr),                              //  output,   width = 12,                  .araddr
		.arprot                 (global_csr_axi_bridge_s0_arprot),                              //  output,    width = 3,                  .arprot
		.arvalid                (global_csr_axi_bridge_s0_arvalid),                             //  output,    width = 1,                  .arvalid
		.arready                (global_csr_axi_bridge_s0_arready),                             //   input,    width = 1,                  .arready
		.rdata                  (global_csr_axi_bridge_s0_rdata),                               //   input,   width = 32,                  .rdata
		.rresp                  (global_csr_axi_bridge_s0_rresp),                               //   input,    width = 2,                  .rresp
		.rvalid                 (global_csr_axi_bridge_s0_rvalid),                              //   input,    width = 1,                  .rvalid
		.rready                 (global_csr_axi_bridge_s0_rready),                              //  output,    width = 1,                  .rready
		.awuser_sai             (),                                                             // (terminated),                                 
		.aruser_sai             (),                                                             // (terminated),                                 
		.awlen                  (),                                                             // (terminated),                                 
		.awburst                (),                                                             // (terminated),                                 
		.awlock                 (),                                                             // (terminated),                                 
		.awcache                (),                                                             // (terminated),                                 
		.awqos                  (),                                                             // (terminated),                                 
		.awregion               (),                                                             // (terminated),                                 
		.wlast                  (),                                                             // (terminated),                                 
		.arlen                  (),                                                             // (terminated),                                 
		.arburst                (),                                                             // (terminated),                                 
		.arlock                 (),                                                             // (terminated),                                 
		.arcache                (),                                                             // (terminated),                                 
		.arqos                  (),                                                             // (terminated),                                 
		.arregion               (),                                                             // (terminated),                                 
		.rlast                  (1'b0),                                                         // (terminated),                                 
		.awuser_addrchk         (),                                                             // (terminated),                                 
		.aruser_addrchk         (),                                                             // (terminated),                                 
		.wuser_datachk          (),                                                             // (terminated),                                 
		.wuser_data             (),                                                             // (terminated),                                 
		.wuser_poison           (),                                                             // (terminated),                                 
		.ruser_datachk          (4'b0000),                                                      // (terminated),                                 
		.ruser_data             (1'b0),                                                         // (terminated),                                 
		.ruser_poison           (1'b0),                                                         // (terminated),                                 
		.awsize                 (),                                                             // (terminated),                                 
		.arsize                 (),                                                             // (terminated),                                 
		.awid                   (),                                                             // (terminated),                                 
		.arid                   (),                                                             // (terminated),                                 
		.bid                    (1'b0),                                                         // (terminated),                                 
		.rid                    (1'b0),                                                         // (terminated),                                 
		.awuser                 (),                                                             // (terminated),                                 
		.wuser                  (),                                                             // (terminated),                                 
		.aruser                 (),                                                             // (terminated),                                 
		.buser                  (1'b0),                                                         // (terminated),                                 
		.ruser                  (1'b0),                                                         // (terminated),                                 
		.awakeup                (),                                                             // (terminated),                                 
		.awtrace                (),                                                             // (terminated),                                 
		.artrace                (),                                                             // (terminated),                                 
		.wpoison                (),                                                             // (terminated),                                 
		.wdatachk               (),                                                             // (terminated),                                 
		.wtrace                 (),                                                             // (terminated),                                 
		.btrace                 (1'b0),                                                         // (terminated),                                 
		.rpoison                (1'b0),                                                         // (terminated),                                 
		.rdatachk               (4'b0000),                                                      // (terminated),                                 
		.rtrace                 (1'b0),                                                         // (terminated),                                 
		.wid                    (),                                                             // (terminated),                                 
		.arsnoop                (),                                                             // (terminated),                                 
		.ardomain               (),                                                             // (terminated),                                 
		.arbar                  (),                                                             // (terminated),                                 
		.awsnoop                (),                                                             // (terminated),                                 
		.awdomain               (),                                                             // (terminated),                                 
		.awbar                  (),                                                             // (terminated),                                 
		.awunique               ()                                                              // (terminated),                                 
	);

	ed_synth_traffic_generator_altera_merlin_axi_slave_ni_19112_5emdibi #(
		.PKT_QOS_H                   (86),
		.PKT_QOS_L                   (86),
		.PKT_THREAD_ID_H             (89),
		.PKT_THREAD_ID_L             (89),
		.PKT_RESPONSE_STATUS_H       (98),
		.PKT_RESPONSE_STATUS_L       (97),
		.PKT_BEGIN_BURST             (85),
		.PKT_CACHE_H                 (96),
		.PKT_CACHE_L                 (93),
		.PKT_DATA_SIDEBAND_H         (84),
		.PKT_DATA_SIDEBAND_L         (84),
		.PKT_ADDR_SIDEBAND_H         (83),
		.PKT_ADDR_SIDEBAND_L         (83),
		.PKT_BURST_TYPE_H            (82),
		.PKT_BURST_TYPE_L            (81),
		.PKT_PROTECTION_H            (92),
		.PKT_PROTECTION_L            (90),
		.PKT_BURST_SIZE_H            (80),
		.PKT_BURST_SIZE_L            (78),
		.PKT_BURSTWRAP_H             (77),
		.PKT_BURSTWRAP_L             (77),
		.PKT_BYTE_CNT_H              (76),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (87),
		.PKT_SRC_ID_L                (87),
		.PKT_DEST_ID_H               (88),
		.PKT_DEST_ID_L               (88),
		.PKT_ORI_BURST_SIZE_L        (99),
		.PKT_ORI_BURST_SIZE_H        (101),
		.PKT_DOMAIN_L                (108),
		.PKT_DOMAIN_H                (109),
		.PKT_SNOOP_L                 (104),
		.PKT_SNOOP_H                 (107),
		.PKT_BARRIER_L               (102),
		.PKT_BARRIER_H               (103),
		.PKT_WUNIQUE                 (110),
		.PKT_EOP_OOO                 (117),
		.PKT_SOP_OOO                 (118),
		.PKT_AWAKEUP                 (128),
		.PKT_ATRACE                  (126),
		.PKT_TRACE                   (127),
		.PKT_POISON_H                (111),
		.PKT_POISON_L                (111),
		.PKT_DATACHK_H               (112),
		.PKT_DATACHK_L               (112),
		.PKT_ADDRCHK_H               (115),
		.PKT_ADDRCHK_L               (114),
		.PKT_SAI_H                   (116),
		.PKT_SAI_L                   (116),
		.PKT_USER_DATA_H             (113),
		.PKT_USER_DATA_L             (113),
		.SAI_WIDTH                   (1),
		.ADDRCHK_WIDTH               (1),
		.USER_DATA_WIDTH             (1),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (129),
		.ADDR_WIDTH                  (24),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (4),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.USE_PKT_DATACHK             (0),
		.USE_PKT_ADDRCHK             (0),
		.SYNC_RESET                  (0),
		.USE_MEMORY_BLOCKS           (0),
		.ROLE_BASED_USER             (0),
		.ENABLE_OOO                  (0),
		.REORDER_BUFFER              (0)
	) driver0_mem_axi4_csr_axi4l_agent (
		.aclk                   (remote_intf_clk_bridge_out_clk_clk),                                      //   input,    width = 1,        clock_sink.clk
		.aresetn                (~remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_003_src_valid),                                                   //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_003_src_ready),                                                   //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_003_src_data),                                                    //   input,  width = 129,                  .data
		.read_cp_channel        (cmd_mux_003_src_channel),                                                 //   input,    width = 4,                  .channel
		.read_cp_startofpacket  (cmd_mux_003_src_startofpacket),                                           //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_003_src_endofpacket),                                             //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_002_src_ready),                                                   //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_002_src_valid),                                                   //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_002_src_data),                                                    //   input,  width = 129,                  .data
		.write_cp_channel       (cmd_mux_002_src_channel),                                                 //   input,    width = 4,                  .channel
		.write_cp_startofpacket (cmd_mux_002_src_startofpacket),                                           //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_002_src_endofpacket),                                             //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (driver0_mem_axi4_csr_axi4l_agent_read_rp_ready),                          //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (driver0_mem_axi4_csr_axi4l_agent_read_rp_valid),                          //  output,    width = 1,                  .valid
		.read_rp_data           (driver0_mem_axi4_csr_axi4l_agent_read_rp_data),                           //  output,  width = 129,                  .data
		.read_rp_startofpacket  (driver0_mem_axi4_csr_axi4l_agent_read_rp_startofpacket),                  //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (driver0_mem_axi4_csr_axi4l_agent_read_rp_endofpacket),                    //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (driver0_mem_axi4_csr_axi4l_agent_write_rp_ready),                         //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (driver0_mem_axi4_csr_axi4l_agent_write_rp_valid),                         //  output,    width = 1,                  .valid
		.write_rp_data          (driver0_mem_axi4_csr_axi4l_agent_write_rp_data),                          //  output,  width = 129,                  .data
		.write_rp_startofpacket (driver0_mem_axi4_csr_axi4l_agent_write_rp_startofpacket),                 //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (driver0_mem_axi4_csr_axi4l_agent_write_rp_endofpacket),                   //  output,    width = 1,                  .endofpacket
		.awaddr                 (driver0_mem_axi4_csr_axi4l_awaddr),                                       //  output,   width = 24, altera_axi_master.awaddr
		.awprot                 (driver0_mem_axi4_csr_axi4l_awprot),                                       //  output,    width = 3,                  .awprot
		.awvalid                (driver0_mem_axi4_csr_axi4l_awvalid),                                      //  output,    width = 1,                  .awvalid
		.awready                (driver0_mem_axi4_csr_axi4l_awready),                                      //   input,    width = 1,                  .awready
		.wdata                  (driver0_mem_axi4_csr_axi4l_wdata),                                        //  output,   width = 32,                  .wdata
		.wstrb                  (driver0_mem_axi4_csr_axi4l_wstrb),                                        //  output,    width = 4,                  .wstrb
		.wvalid                 (driver0_mem_axi4_csr_axi4l_wvalid),                                       //  output,    width = 1,                  .wvalid
		.wready                 (driver0_mem_axi4_csr_axi4l_wready),                                       //   input,    width = 1,                  .wready
		.bresp                  (driver0_mem_axi4_csr_axi4l_bresp),                                        //   input,    width = 2,                  .bresp
		.bvalid                 (driver0_mem_axi4_csr_axi4l_bvalid),                                       //   input,    width = 1,                  .bvalid
		.bready                 (driver0_mem_axi4_csr_axi4l_bready),                                       //  output,    width = 1,                  .bready
		.araddr                 (driver0_mem_axi4_csr_axi4l_araddr),                                       //  output,   width = 24,                  .araddr
		.arprot                 (driver0_mem_axi4_csr_axi4l_arprot),                                       //  output,    width = 3,                  .arprot
		.arvalid                (driver0_mem_axi4_csr_axi4l_arvalid),                                      //  output,    width = 1,                  .arvalid
		.arready                (driver0_mem_axi4_csr_axi4l_arready),                                      //   input,    width = 1,                  .arready
		.rdata                  (driver0_mem_axi4_csr_axi4l_rdata),                                        //   input,   width = 32,                  .rdata
		.rresp                  (driver0_mem_axi4_csr_axi4l_rresp),                                        //   input,    width = 2,                  .rresp
		.rvalid                 (driver0_mem_axi4_csr_axi4l_rvalid),                                       //   input,    width = 1,                  .rvalid
		.rready                 (driver0_mem_axi4_csr_axi4l_rready),                                       //  output,    width = 1,                  .rready
		.awuser_sai             (),                                                                        // (terminated),                                 
		.aruser_sai             (),                                                                        // (terminated),                                 
		.awlen                  (),                                                                        // (terminated),                                 
		.awburst                (),                                                                        // (terminated),                                 
		.awlock                 (),                                                                        // (terminated),                                 
		.awcache                (),                                                                        // (terminated),                                 
		.awqos                  (),                                                                        // (terminated),                                 
		.awregion               (),                                                                        // (terminated),                                 
		.wlast                  (),                                                                        // (terminated),                                 
		.arlen                  (),                                                                        // (terminated),                                 
		.arburst                (),                                                                        // (terminated),                                 
		.arlock                 (),                                                                        // (terminated),                                 
		.arcache                (),                                                                        // (terminated),                                 
		.arqos                  (),                                                                        // (terminated),                                 
		.arregion               (),                                                                        // (terminated),                                 
		.rlast                  (1'b0),                                                                    // (terminated),                                 
		.awuser_addrchk         (),                                                                        // (terminated),                                 
		.aruser_addrchk         (),                                                                        // (terminated),                                 
		.wuser_datachk          (),                                                                        // (terminated),                                 
		.wuser_data             (),                                                                        // (terminated),                                 
		.wuser_poison           (),                                                                        // (terminated),                                 
		.ruser_datachk          (4'b0000),                                                                 // (terminated),                                 
		.ruser_data             (1'b0),                                                                    // (terminated),                                 
		.ruser_poison           (1'b0),                                                                    // (terminated),                                 
		.awsize                 (),                                                                        // (terminated),                                 
		.arsize                 (),                                                                        // (terminated),                                 
		.awid                   (),                                                                        // (terminated),                                 
		.arid                   (),                                                                        // (terminated),                                 
		.bid                    (1'b0),                                                                    // (terminated),                                 
		.rid                    (1'b0),                                                                    // (terminated),                                 
		.awuser                 (),                                                                        // (terminated),                                 
		.wuser                  (),                                                                        // (terminated),                                 
		.aruser                 (),                                                                        // (terminated),                                 
		.buser                  (1'b0),                                                                    // (terminated),                                 
		.ruser                  (1'b0),                                                                    // (terminated),                                 
		.awakeup                (),                                                                        // (terminated),                                 
		.awtrace                (),                                                                        // (terminated),                                 
		.artrace                (),                                                                        // (terminated),                                 
		.wpoison                (),                                                                        // (terminated),                                 
		.wdatachk               (),                                                                        // (terminated),                                 
		.wtrace                 (),                                                                        // (terminated),                                 
		.btrace                 (1'b0),                                                                    // (terminated),                                 
		.rpoison                (1'b0),                                                                    // (terminated),                                 
		.rdatachk               (4'b0000),                                                                 // (terminated),                                 
		.rtrace                 (1'b0),                                                                    // (terminated),                                 
		.wid                    (),                                                                        // (terminated),                                 
		.arsnoop                (),                                                                        // (terminated),                                 
		.ardomain               (),                                                                        // (terminated),                                 
		.arbar                  (),                                                                        // (terminated),                                 
		.awsnoop                (),                                                                        // (terminated),                                 
		.awdomain               (),                                                                        // (terminated),                                 
		.awbar                  (),                                                                        // (terminated),                                 
		.awunique               ()                                                                         // (terminated),                                 
	);

	ed_synth_traffic_generator_altera_merlin_router_1921_lras3ty router (
		.sink_ready         (remote_access_jamb_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (remote_access_jamb_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (remote_access_jamb_master_agent_cp_data),                                //   input,  width = 129,          .data
		.sink_startofpacket (remote_access_jamb_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (remote_access_jamb_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                        //  output,  width = 129,          .data
		.src_channel        (router_src_channel),                                                     //  output,    width = 4,          .channel
		.src_startofpacket  (router_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_router_1921_cq4uqsy router_001 (
		.sink_ready         (global_csr_axi_bridge_s0_agent_write_rp_ready),               //  output,    width = 1,      sink.ready
		.sink_valid         (global_csr_axi_bridge_s0_agent_write_rp_valid),               //   input,    width = 1,          .valid
		.sink_data          (global_csr_axi_bridge_s0_agent_write_rp_data),                //   input,  width = 129,          .data
		.sink_startofpacket (global_csr_axi_bridge_s0_agent_write_rp_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (global_csr_axi_bridge_s0_agent_write_rp_endofpacket),         //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                         //  output,  width = 129,          .data
		.src_channel        (router_001_src_channel),                                      //  output,    width = 4,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_router_1921_cq4uqsy router_002 (
		.sink_ready         (global_csr_axi_bridge_s0_agent_read_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (global_csr_axi_bridge_s0_agent_read_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (global_csr_axi_bridge_s0_agent_read_rp_data),                 //   input,  width = 129,          .data
		.sink_startofpacket (global_csr_axi_bridge_s0_agent_read_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (global_csr_axi_bridge_s0_agent_read_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                         //  output,  width = 129,          .data
		.src_channel        (router_002_src_channel),                                      //  output,    width = 4,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_router_1921_cq4uqsy router_003 (
		.sink_ready         (driver0_mem_axi4_csr_axi4l_agent_write_rp_ready),                        //  output,    width = 1,      sink.ready
		.sink_valid         (driver0_mem_axi4_csr_axi4l_agent_write_rp_valid),                        //   input,    width = 1,          .valid
		.sink_data          (driver0_mem_axi4_csr_axi4l_agent_write_rp_data),                         //   input,  width = 129,          .data
		.sink_startofpacket (driver0_mem_axi4_csr_axi4l_agent_write_rp_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (driver0_mem_axi4_csr_axi4l_agent_write_rp_endofpacket),                  //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                    //  output,  width = 129,          .data
		.src_channel        (router_003_src_channel),                                                 //  output,    width = 4,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_router_1921_cq4uqsy router_004 (
		.sink_ready         (driver0_mem_axi4_csr_axi4l_agent_read_rp_ready),                         //  output,    width = 1,      sink.ready
		.sink_valid         (driver0_mem_axi4_csr_axi4l_agent_read_rp_valid),                         //   input,    width = 1,          .valid
		.sink_data          (driver0_mem_axi4_csr_axi4l_agent_read_rp_data),                          //   input,  width = 129,          .data
		.sink_startofpacket (driver0_mem_axi4_csr_axi4l_agent_read_rp_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (driver0_mem_axi4_csr_axi4l_agent_read_rp_endofpacket),                   //   input,    width = 1,          .endofpacket
		.clk                (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                    //  output,  width = 129,          .data
		.src_channel        (router_004_src_channel),                                                 //  output,    width = 4,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_traffic_limiter_1921_6hyjguq #(
		.SYNC_RESET                           (0),
		.PKT_DEST_ID_H                        (88),
		.PKT_DEST_ID_L                        (88),
		.PKT_SRC_ID_H                         (87),
		.PKT_SRC_ID_L                         (87),
		.PKT_BYTE_CNT_H                       (76),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (125),
		.PKT_TRANS_SEQ_L                      (119),
		.MAX_OUTSTANDING_RESPONSES            (17),
		.PIPELINED                            (0),
		.ST_DATA_W                            (129),
		.ST_CHANNEL_W                         (4),
		.VALID_WIDTH                          (4),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) remote_access_jamb_master_limiter (
		.clk                    (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                  (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                       //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                       //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                        //   input,  width = 129,          .data
		.cmd_sink_channel       (router_src_channel),                                                     //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (remote_access_jamb_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (remote_access_jamb_master_limiter_cmd_src_data),                         //  output,  width = 129,          .data
		.cmd_src_channel        (remote_access_jamb_master_limiter_cmd_src_channel),                      //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (remote_access_jamb_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (remote_access_jamb_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                      //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                      //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                    //   input,    width = 4,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                       //   input,  width = 129,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (remote_access_jamb_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (remote_access_jamb_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (remote_access_jamb_master_limiter_rsp_src_data),                         //  output,  width = 129,          .data
		.rsp_src_channel        (remote_access_jamb_master_limiter_rsp_src_channel),                      //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (remote_access_jamb_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (remote_access_jamb_master_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (remote_access_jamb_master_limiter_cmd_valid_data)                        //  output,    width = 4, cmd_valid.data
	);

	ed_synth_traffic_generator_altera_merlin_demultiplexer_1921_yicp2kq cmd_demux (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,        clk.clk
		.reset              (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (remote_access_jamb_master_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (remote_access_jamb_master_limiter_cmd_src_channel),                      //   input,    width = 4,           .channel
		.sink_data          (remote_access_jamb_master_limiter_cmd_src_data),                         //   input,  width = 129,           .data
		.sink_startofpacket (remote_access_jamb_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (remote_access_jamb_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (remote_access_jamb_master_limiter_cmd_valid_data),                       //   input,    width = 4, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                   //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                   //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                                    //  output,  width = 129,           .data
		.src0_channel       (cmd_demux_src0_channel),                                                 //  output,    width = 4,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                           //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                             //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                   //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                   //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                                    //  output,  width = 129,           .data
		.src1_channel       (cmd_demux_src1_channel),                                                 //  output,    width = 4,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                           //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                             //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                   //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                   //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                                                    //  output,  width = 129,           .data
		.src2_channel       (cmd_demux_src2_channel),                                                 //  output,    width = 4,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                           //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                             //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                   //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                   //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                                                    //  output,  width = 129,           .data
		.src3_channel       (cmd_demux_src3_channel),                                                 //  output,    width = 4,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                           //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                              //  output,    width = 1,           .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_multiplexer_1922_avyhzyy cmd_mux (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                           //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                            //  output,  width = 129,          .data
		.src_channel         (cmd_mux_src_channel),                                         //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                      //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src0_data),                                         //   input,  width = 129,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_multiplexer_1922_avyhzyy cmd_mux_001 (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                        //  output,  width = 129,          .data
		.src_channel         (cmd_mux_001_src_channel),                                     //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                      //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src1_data),                                         //   input,  width = 129,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_multiplexer_1922_avyhzyy cmd_mux_002 (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset               (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                   //  output,  width = 129,          .data
		.src_channel         (cmd_mux_002_src_channel),                                                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                                 //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src2_data),                                                    //   input,  width = 129,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_multiplexer_1922_avyhzyy cmd_mux_003 (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset               (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                                   //  output,  width = 129,          .data
		.src_channel         (cmd_mux_003_src_channel),                                                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                                 //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src3_data),                                                    //   input,  width = 129,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_demultiplexer_1921_qq5eekq rsp_demux (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                      //   input,    width = 4,          .channel
		.sink_data          (router_001_src_data),                                         //   input,  width = 129,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                         //  output,  width = 129,          .data
		.src0_channel       (rsp_demux_src0_channel),                                      //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_demultiplexer_1921_qq5eekq rsp_demux_001 (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (global_csr_axi_bridge_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                      //   input,    width = 4,          .channel
		.sink_data          (router_002_src_data),                                         //   input,  width = 129,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                     //  output,  width = 129,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                  //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_demultiplexer_1921_qq5eekq rsp_demux_002 (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                                 //   input,    width = 4,          .channel
		.sink_data          (router_003_src_data),                                                    //   input,  width = 129,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                //  output,  width = 129,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                          //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_demultiplexer_1921_qq5eekq rsp_demux_003 (
		.clk                (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                                 //   input,    width = 4,          .channel
		.sink_data          (router_004_src_data),                                                    //   input,  width = 129,          .data
		.sink_startofpacket (router_004_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                                //  output,  width = 129,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                          //  output,    width = 1,          .endofpacket
	);

	ed_synth_traffic_generator_altera_merlin_multiplexer_1922_wrdg73y rsp_mux (
		.clk                 (remote_intf_clk_bridge_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset               (remote_access_jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                       //  output,  width = 129,          .data
		.src_channel         (rsp_mux_src_channel),                                                    //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                 //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                    //   input,  width = 129,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                               //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                               //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                             //   input,    width = 4,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                //   input,  width = 129,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                               //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                               //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                             //   input,    width = 4,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                //   input,  width = 129,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                               //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                               //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                             //   input,    width = 4,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                //   input,  width = 129,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                                          //   input,    width = 1,          .endofpacket
	);

endmodule
